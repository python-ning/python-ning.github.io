<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>python ning&#39;s blog</title>
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://python-ning.github.io/"/>
  <updated>2016-06-27T22:40:31.000Z</updated>
  <id>http://python-ning.github.io/</id>
  
  <author>
    <name>python-ning</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>python面试题精选</title>
    <link href="http://python-ning.github.io/2016/06/27/python_interview_questions/"/>
    <id>http://python-ning.github.io/2016/06/27/python_interview_questions/</id>
    <published>2016-06-27T07:00:00.000Z</published>
    <updated>2016-06-27T22:40:31.000Z</updated>
    
    <content type="html">&lt;p&gt;&lt;img src=&quot;http://7xojjc.com1.z0.glb.clouddn.com/293387-106.jpg&quot; class=&quot;img-shadow&quot; style=&quot;display: block;margin: auto&quot;&gt;&lt;br&gt;小癖好~爱做面试题，感觉每次做份面试题总能在其中复习了很多基础知识和一些算法~&lt;/p&gt;
&lt;h3 id=&quot;用规定的Python方法，在一行中对给定的任意整数数列，按照如下规则排序：&quot;&gt;用规定的Python方法，在一行中对给定的任意整数数列，按照如下规则排序：&lt;/h3&gt;&lt;p&gt;a) 非负数在前，负数在后；&lt;br&gt;b) 非负数部分按照从小到大排序；&lt;br&gt;c) 负数部分按从大到小排序。&lt;br&gt;如： 数列 foo = [-5,8,0,4,9,-4,-20,-2,8,2,-4]&lt;br&gt;希望排序后为[0,2,4,8,8,9,-2,-4,-4,-5,-20]&lt;/p&gt;
&lt;p&gt;解答：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;&lt;span class=&quot;prompt&quot;&gt;&amp;gt;&amp;gt;&lt;/span&gt;&amp;gt; foo = [-&lt;span class=&quot;number&quot;&gt;5&lt;/span&gt;,&lt;span class=&quot;number&quot;&gt;8&lt;/span&gt;,&lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;,&lt;span class=&quot;number&quot;&gt;4&lt;/span&gt;,&lt;span class=&quot;number&quot;&gt;9&lt;/span&gt;,-&lt;span class=&quot;number&quot;&gt;4&lt;/span&gt;,-&lt;span class=&quot;number&quot;&gt;20&lt;/span&gt;,-&lt;span class=&quot;number&quot;&gt;2&lt;/span&gt;,&lt;span class=&quot;number&quot;&gt;8&lt;/span&gt;,&lt;span class=&quot;number&quot;&gt;2&lt;/span&gt;,-&lt;span class=&quot;number&quot;&gt;4&lt;/span&gt;]
&lt;span class=&quot;prompt&quot;&gt;&amp;gt;&amp;gt;&lt;/span&gt;&amp;gt; sorted(foo, key=lambda &lt;span class=&quot;symbol&quot;&gt;x:&lt;/span&gt; (x&amp;gt;=&lt;span class=&quot;number&quot;&gt;0&lt;/span&gt; and -abs(&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;/float(x+&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;)) or abs(x)))
[&lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;2&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;4&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;8&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;8&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;9&lt;/span&gt;, -&lt;span class=&quot;number&quot;&gt;2&lt;/span&gt;, -&lt;span class=&quot;number&quot;&gt;4&lt;/span&gt;, -&lt;span class=&quot;number&quot;&gt;4&lt;/span&gt;, -&lt;span class=&quot;number&quot;&gt;5&lt;/span&gt;, -&lt;span class=&quot;number&quot;&gt;20&lt;/span&gt;]
&lt;span class=&quot;prompt&quot;&gt;&amp;gt;&amp;gt;&lt;/span&gt;&amp;gt;
&lt;/code&gt;&lt;/pre&gt;&lt;h3 id=&quot;给出用递归的方式求斐波那契数列的第n项的方法：&quot;&gt;给出用递归的方式求斐波那契数列的第n项的方法：&lt;/h3&gt;&lt;p&gt;（斐波那契数列指的是这样一个数列0，1，1，2，3，5，8，13，21，34，55，89，144，233，377，…）&lt;br&gt;特别指出：第0项是0，第1项是第一个1。这个数列从第2项开始，每一项都等于前两项之和。&lt;/p&gt;
&lt;p&gt;解答：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;&lt;span class=&quot;comment&quot;&gt;# test.py&lt;/span&gt;
&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;fib&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(n)&lt;/span&gt;:&lt;/span&gt;
    &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; n &amp;lt;= &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;:
        &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; n
    &lt;span class=&quot;keyword&quot;&gt;else&lt;/span&gt;:
        &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt;(fib(n - &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;) + fib(n - &lt;span class=&quot;number&quot;&gt;2&lt;/span&gt;))
&lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; __name__ == &lt;span class=&quot;string&quot;&gt;&#39;__main__&#39;&lt;/span&gt;:
    n = &lt;span class=&quot;number&quot;&gt;10&lt;/span&gt;
    &lt;span class=&quot;keyword&quot;&gt;print&lt;/span&gt; fib(n)
&lt;/code&gt;&lt;/pre&gt;&lt;h3 id=&quot;求大于正整数n的最小质数&quot;&gt;求大于正整数n的最小质数&lt;/h3&gt;&lt;pre&gt;&lt;code&gt;&lt;span class=&quot;keyword&quot;&gt;import&lt;/span&gt; math

&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;func_get_prime&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(n)&lt;/span&gt;:&lt;/span&gt;
    &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; filter(&lt;span class=&quot;keyword&quot;&gt;lambda&lt;/span&gt; x: &lt;span class=&quot;keyword&quot;&gt;not&lt;/span&gt; [x % i &lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt; i &lt;span class=&quot;keyword&quot;&gt;in&lt;/span&gt; range(&lt;span class=&quot;number&quot;&gt;2&lt;/span&gt;, int(math.sqrt(x)) + &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;) &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; x % i == &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;], range(&lt;span class=&quot;number&quot;&gt;2&lt;/span&gt;, n + &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;))
&lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; __name__ == &lt;span class=&quot;string&quot;&gt;&#39;__main__&#39;&lt;/span&gt;:
    &lt;span class=&quot;keyword&quot;&gt;print&lt;/span&gt; min(func_get_prime(&lt;span class=&quot;number&quot;&gt;100&lt;/span&gt;))
&lt;/code&gt;&lt;/pre&gt;&lt;h3 id=&quot;在不声明新变量的情况下，让变量a和变量b的值互换？&quot;&gt;在不声明新变量的情况下，让变量a和变量b的值互换？&lt;/h3&gt;&lt;p&gt;解答：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;&amp;gt;&amp;gt;&amp;gt; &lt;span class=&quot;tag&quot;&gt;a&lt;/span&gt; = &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;
&amp;gt;&amp;gt;&amp;gt; &lt;span class=&quot;tag&quot;&gt;b&lt;/span&gt; = &lt;span class=&quot;number&quot;&gt;9&lt;/span&gt;
&amp;gt;&amp;gt;&amp;gt; &lt;span class=&quot;tag&quot;&gt;a&lt;/span&gt; = &lt;span class=&quot;tag&quot;&gt;a&lt;/span&gt; + &lt;span class=&quot;tag&quot;&gt;b&lt;/span&gt;
&amp;gt;&amp;gt;&amp;gt; &lt;span class=&quot;tag&quot;&gt;b&lt;/span&gt; = &lt;span class=&quot;tag&quot;&gt;a&lt;/span&gt; - &lt;span class=&quot;tag&quot;&gt;b&lt;/span&gt;
&amp;gt;&amp;gt;&amp;gt; &lt;span class=&quot;tag&quot;&gt;a&lt;/span&gt; = &lt;span class=&quot;tag&quot;&gt;a&lt;/span&gt; - &lt;span class=&quot;tag&quot;&gt;b&lt;/span&gt;
&amp;gt;&amp;gt;&amp;gt; &lt;span class=&quot;tag&quot;&gt;a&lt;/span&gt;
&lt;span class=&quot;number&quot;&gt;9&lt;/span&gt;
&amp;gt;&amp;gt;&amp;gt; &lt;span class=&quot;tag&quot;&gt;b&lt;/span&gt;
&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;
&amp;gt;&amp;gt;&amp;gt;
&lt;/code&gt;&lt;/pre&gt;&lt;h3 id=&quot;Python是如何进行内存管理的？&quot;&gt;Python是如何进行内存管理的？&lt;/h3&gt;&lt;p&gt;解答:从三个方面来说,一对象的引用计数机制,二垃圾回收机制,三内存池机制&lt;br&gt;&lt;strong&gt;一、对象的引用计数机制&lt;/strong&gt;&lt;br&gt;python内部使用引用计数，来保持追踪内存中的对象，所有对象都有引用计数。&lt;br&gt;引用计数增加的情况：&lt;br&gt;1，一个对象分配一个新名称&lt;br&gt;2，将其放入一个容器中（如列表、元组或字典）&lt;br&gt;引用计数减少的情况：&lt;br&gt;1，使用del语句对对象别名显示的销毁&lt;br&gt;2，引用超出作用域或被重新赋值&lt;br&gt;sys.getrefcount( )函数可以获得对象的当前引用计数&lt;br&gt;多数情况下，引用计数比你猜测得要大得多。对于不可变数据（如数字和字符串），解释器会在程序的不同部分共享内存，以便节约内存。&lt;br&gt;&lt;strong&gt;二、垃圾回收&lt;/strong&gt;&lt;br&gt;1，当一个对象的引用计数归零时，它将被垃圾收集机制处理掉。&lt;br&gt;2，当两个对象a和b相互引用时，del语句可以减少a和b的引用计数，并销毁用于引用底层对象的名称。然而由于每个对象都包含一个对其他对象的应用，因此引用计数不会归零，对象也不会销毁。（从而导致内存泄露）。为解决这一问题，解释器会定期执行一个循环检测器，搜索不可访问对象的循环并删除它们。&lt;br&gt;&lt;strong&gt;三、内存池机制&lt;/strong&gt;&lt;br&gt;Python提供了对内存的垃圾收集机制，但是它将不用的内存放到内存池而不是返回给操作系统。&lt;br&gt;1，Pymalloc机制。为了加速Python的执行效率，Python引入了一个内存池机制，用于管理对小块内存的申请和释放。&lt;br&gt;2，Python中所有小于256个字节的对象都使用pymalloc实现的分配器，而大的对象则使用系统的malloc。&lt;br&gt;3，对于Python对象，如整数，浮点数和List，都有其独立的私有内存池，对象间不共享他们的内存池。也就是说如果你分配又释放了大量的整数，用于缓存这些整数的内存就不能再分配给浮点数。&lt;/p&gt;
&lt;h3 id=&quot;什么是lambda函数？它有什么好处?&quot;&gt;什么是lambda函数？它有什么好处?&lt;/h3&gt;&lt;p&gt;解答：&lt;/p&gt;
&lt;p&gt;lambda 表达式，通常是在需要一个函数，但是又不想费神去命名一个函数的场合下使用，也就是指匿名函数&lt;br&gt;lambda函数：首要用途是指短小的回调函数&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;lambda [arguments]&lt;span class=&quot;symbol&quot;&gt;:expression&lt;/span&gt;
&lt;span class=&quot;prompt&quot;&gt;&amp;gt;&amp;gt;&lt;/span&gt;&amp;gt; a=lambda x,&lt;span class=&quot;symbol&quot;&gt;y:&lt;/span&gt;x+y
&lt;span class=&quot;prompt&quot;&gt;&amp;gt;&amp;gt;&lt;/span&gt;&amp;gt; a(&lt;span class=&quot;number&quot;&gt;3&lt;/span&gt;,&lt;span class=&quot;number&quot;&gt;11&lt;/span&gt;)
&lt;/code&gt;&lt;/pre&gt;&lt;h3 id=&quot;现在有一个文件url-txt，每一行都是一个网站名（例如：map-baidu-com）请用Python读取这个文件并且使用正则表达式匹配简单的以“www-”，以“-com”或者”-edu”或者”-gov”作结尾的web域名，然后输出到另一个文件中&quot;&gt;现在有一个文件url.txt，每一行都是一个网站名（例如：map.baidu.com）请用Python读取这个文件并且使用正则表达式匹配简单的以“www.”，以“.com”或者”.edu”或者”.gov”作结尾的web域名，然后输出到另一个文件中&lt;/h3&gt;&lt;p&gt;解答：&lt;br&gt;        coding:utf-8&lt;br&gt;        import re&lt;br&gt;        sch = re.compile(r”^www.*[com,edu,gov]$”)&lt;br&gt;        listt = []&lt;br&gt;        with open(‘C:\Users\test\Desktop\test.txt’, ‘r’) as f:&lt;br&gt;            file_list = f.readlines()&lt;br&gt;            for i in file_list:&lt;br&gt;                listt.append(sch.match(i).group())&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;with &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;title&quot;&gt;open&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(&lt;span class=&quot;string&quot;&gt;&#39;C:\Users\test\Desktop\\chen.txt&#39;&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&#39;a&#39;&lt;/span&gt;)&lt;/span&gt;&lt;/span&gt; as f:
    &lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;tag&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;in&lt;/span&gt; listt:
        f.&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;title&quot;&gt;write&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(i + &lt;span class=&quot;string&quot;&gt;&#39;\n&#39;&lt;/span&gt;)&lt;/span&gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;h3 id=&quot;写一个装饰器，计算这个函数运行了多长时间？&quot;&gt;写一个装饰器，计算这个函数运行了多长时间？&lt;/h3&gt;&lt;pre&gt;&lt;code&gt;&lt;span class=&quot;keyword&quot;&gt;import&lt;/span&gt; time
&lt;span class=&quot;keyword&quot;&gt;from&lt;/span&gt; functools &lt;span class=&quot;keyword&quot;&gt;import&lt;/span&gt; wraps
&lt;span class=&quot;keyword&quot;&gt;import&lt;/span&gt; random


&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;fn_timer&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(function)&lt;/span&gt;:&lt;/span&gt;
&lt;span class=&quot;decorator&quot;&gt;    @wraps(function)&lt;/span&gt;
    &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;function_timer&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(*args, **kwargs)&lt;/span&gt;:&lt;/span&gt;
        t0 = time.time()
        result = function(*args, **kwargs)
        t1 = time.time()
        &lt;span class=&quot;keyword&quot;&gt;print&lt;/span&gt; (&lt;span class=&quot;string&quot;&gt;&quot;Total time running %s: %s seconds&quot;&lt;/span&gt; %(function.func_name, str(t1-t0)))
        &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; result
    &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; function_timer


&lt;span class=&quot;decorator&quot;&gt;@fn_timer&lt;/span&gt;
&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;random_sort&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(n)&lt;/span&gt;:&lt;/span&gt;
    &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; sorted([random.random() &lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt; i &lt;span class=&quot;keyword&quot;&gt;in&lt;/span&gt; range(n)])


&lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; __name__ == &lt;span class=&quot;string&quot;&gt;&quot;__main__&quot;&lt;/span&gt;:
    random_sort(&lt;span class=&quot;number&quot;&gt;2000000&lt;/span&gt;)
&lt;/code&gt;&lt;/pre&gt;&lt;h3 id=&quot;django查询取出数据库”User表”中字段”name”为”chen”和”ning”的数据？&quot;&gt;django查询取出数据库”User表”中字段”name”为”chen”和”ning”的数据？&lt;/h3&gt;&lt;pre&gt;&lt;code&gt;# django查询方法
&lt;span class=&quot;keyword&quot;&gt;query&lt;/span&gt; = Author.objects.filter(first_name__in=[&lt;span class=&quot;string&quot;&gt;&quot;chen&quot;&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&quot;ning&quot;&lt;/span&gt;])

# Q查询
&lt;span class=&quot;keyword&quot;&gt;query&lt;/span&gt; = Author.objects.filter(&lt;span class=&quot;literal&quot;&gt;Q&lt;/span&gt;(first_name__contains=&lt;span class=&quot;string&quot;&gt;&quot;chen&quot;&lt;/span&gt;) | &lt;span class=&quot;literal&quot;&gt;Q&lt;/span&gt;(first_name__contains=&lt;span class=&quot;string&quot;&gt;&quot;ning&quot;&lt;/span&gt;))
&lt;span class=&quot;keyword&quot;&gt;query&lt;/span&gt; = Author.objects.filter(&lt;span class=&quot;literal&quot;&gt;Q&lt;/span&gt;(first_name=&lt;span class=&quot;string&quot;&gt;&quot;chen&quot;&lt;/span&gt;) | &lt;span class=&quot;literal&quot;&gt;Q&lt;/span&gt;(first_name=&lt;span class=&quot;string&quot;&gt;&quot;ning&quot;&lt;/span&gt;))
&lt;/code&gt;&lt;/pre&gt;</content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;http://7xojjc.com1.z0.glb.clouddn.com/293387-106.jpg&quot; class=&quot;img-shadow&quot; style=&quot;display: block;margin: auto&quot;&gt;&lt;br&gt;小癖好~爱做面试题，感觉每次
    
    </summary>
    
      <category term="python" scheme="http://python-ning.github.io/categories/python/"/>
    
    
      <category term="面试题" scheme="http://python-ning.github.io/tags/%E9%9D%A2%E8%AF%95%E9%A2%98/"/>
    
  </entry>
  
  <entry>
    <title>mac安装mysql</title>
    <link href="http://python-ning.github.io/2016/05/14/mysql_mac_install_question/"/>
    <id>http://python-ning.github.io/2016/05/14/mysql_mac_install_question/</id>
    <published>2016-05-14T07:00:00.000Z</published>
    <updated>2016-06-27T22:43:49.000Z</updated>
    
    <content type="html">&lt;p&gt;mac下安装mysql，遇到了一个小波折，折磨了我一天，解决了，也借此机会总结一下。&lt;/p&gt;
&lt;p&gt;&lt;code style=&quot;color: red&quot;&gt;注意&lt;/code&gt; mac上一定要安装xcode，哪怕你不是ios开发工程师也是要安装的，因为在苹果上开发大多数操作都要依赖xcode&lt;/p&gt;
&lt;p&gt;mysql 在mac上安装有两种方式：&lt;/p&gt;
&lt;h3 id=&quot;1-Homebrew安装mysql&quot;&gt;1.Homebrew安装mysql&lt;/h3&gt;&lt;p&gt;Homebrew类似ubuntu系统的apt-get包管理，命令也基本一样。&lt;/p&gt;
&lt;h2 id=&quot;安装Homebrew&quot;&gt;安装Homebrew&lt;/h2&gt;&lt;pre&gt;&lt;code&gt;ruby &lt;span class=&quot;operator&quot;&gt;-e&lt;/span&gt; &lt;span class=&quot;string&quot;&gt;&quot;&lt;span class=&quot;variable&quot;&gt;$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/master/install)&lt;/span&gt;&quot;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;h2 id=&quot;Homebrew基本命令&quot;&gt;Homebrew基本命令&lt;/h2&gt;&lt;pre&gt;&lt;code&gt;$ brew
Example usage:
 brew [info | home | options ] [FORMULA...]
 brew install FORMULA...   &lt;span class=&quot;comment&quot;&gt;// 安装包&lt;/span&gt;
 brew uninstall FORMULA... &lt;span class=&quot;comment&quot;&gt;// 卸载包&lt;/span&gt;
 brew &lt;span class=&quot;keyword&quot;&gt;search&lt;/span&gt; [foo]         &lt;span class=&quot;comment&quot;&gt;// 搜索包&lt;/span&gt;
 brew &lt;span class=&quot;keyword&quot;&gt;list&lt;/span&gt; [FORMULA...]    &lt;span class=&quot;comment&quot;&gt;// 显示已经安装的软件列表&lt;/span&gt;
 brew &lt;span class=&quot;keyword&quot;&gt;update&lt;/span&gt;               &lt;span class=&quot;comment&quot;&gt;// 更新brew&lt;/span&gt;
 brew upgrade [FORMULA...] &lt;span class=&quot;comment&quot;&gt;// 更新包，不跟包名就是更新所有包&lt;/span&gt;
 brew pin/unpin [FORMULA...]
Troubleshooting:
 brew doctor
 brew install -vd FORMULA
 brew [--env | --config]
Brewing:
 brew create [URL [--&lt;span class=&quot;keyword&quot;&gt;no&lt;/span&gt;-fetch]]
 brew &lt;span class=&quot;keyword&quot;&gt;edit&lt;/span&gt; [FORMULA...]
 &lt;span class=&quot;keyword&quot;&gt;open&lt;/span&gt; https:&lt;span class=&quot;comment&quot;&gt;//github.com/Homebrew/homebrew/wiki/Formula-Cookbook&lt;/span&gt;
Further &lt;span class=&quot;keyword&quot;&gt;help&lt;/span&gt;:
 &lt;span class=&quot;keyword&quot;&gt;man&lt;/span&gt; brew
 brew home
&lt;/code&gt;&lt;/pre&gt;&lt;h2 id=&quot;安装mysql&quot;&gt;安装mysql&lt;/h2&gt;&lt;pre&gt;&lt;code&gt;&lt;span class=&quot;label&quot;&gt;sudo&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;brew &lt;/span&gt;install mysql
&lt;/code&gt;&lt;/pre&gt;&lt;h2 id=&quot;mysql启动，重启，关闭服务&quot;&gt;mysql启动，重启，关闭服务&lt;/h2&gt;&lt;pre&gt;&lt;code&gt;&lt;span class=&quot;label&quot;&gt;sudo&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;brew &lt;/span&gt;services start mysql
&lt;span class=&quot;label&quot;&gt;sudo&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;brew &lt;/span&gt;services restart mysql
&lt;span class=&quot;label&quot;&gt;sudo&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;brew &lt;/span&gt;services stop mysql
&lt;/code&gt;&lt;/pre&gt;&lt;h2 id=&quot;常遇问题1&quot;&gt;常遇问题1&lt;/h2&gt;&lt;p&gt;当mysql安装好，启动了服务后，我们&lt;code style=&quot;color: red&quot;&gt;mysql -u root -p&lt;/code&gt;(mysql默认密码为空)时，可能会出现以下报错&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;Error: Can&#39;t connect &lt;span class=&quot;keyword&quot;&gt;to&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;local&lt;/span&gt; MySQL server &lt;span class=&quot;keyword&quot;&gt;through&lt;/span&gt; socket &#39;/tmp/mysql.sock&#39; (&lt;span class=&quot;number&quot;&gt;111&lt;/span&gt;)
&lt;/code&gt;&lt;/pre&gt;&lt;h2 id=&quot;解决办法1&quot;&gt;解决办法1&lt;/h2&gt;&lt;p&gt;1.查找电脑上所有的mysql都在哪里&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;sudo &lt;span class=&quot;built_in&quot;&gt;find&lt;/span&gt; / -&lt;span class=&quot;built_in&quot;&gt;name&lt;/span&gt; mysql
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;2.找出mysql安装的目录，给权限&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;&lt;span class=&quot;tag&quot;&gt;chown&lt;/span&gt; &lt;span class=&quot;tag&quot;&gt;-R&lt;/span&gt; &lt;span class=&quot;tag&quot;&gt;mysql&lt;/span&gt;&lt;span class=&quot;pseudo&quot;&gt;:mysql&lt;/span&gt; &lt;span class=&quot;tag&quot;&gt;xxx&lt;/span&gt;你的&lt;span class=&quot;tag&quot;&gt;mysql&lt;/span&gt;目录&lt;span class=&quot;tag&quot;&gt;xxx&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;实在不知道，你就把所有搜出来的mysql目录文件都给权限，前提是你自己的测试开发环境，可别在服务器上这么搞。&lt;/p&gt;
&lt;h3 id=&quot;2-dmg包双击安装&quot;&gt;2.dmg包双击安装&lt;/h3&gt;&lt;p&gt;在mysql官网选downloads，选Community（社区版的意思），点这个&lt;code style=&quot;color: red&quot;&gt;MySQL Community Server (GPL)&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;下载那个dmg后缀名的包下载下来点点点，下一步就好了，安装好以后他会给你个初始登陆密码记录下来，然后他会在你的设置里多一个mysql的图标，点击进入后可以开启关闭mysql服务&lt;/p&gt;
&lt;p&gt;基本就安装好了，也可能会有1遇到的问题，按上述方法改就好了。&lt;/p&gt;
&lt;p&gt;ps：贴图太麻烦，还有好多事要做，我要速度学成为大牛。&lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;p&gt;mac下安装mysql，遇到了一个小波折，折磨了我一天，解决了，也借此机会总结一下。&lt;/p&gt;
&lt;p&gt;&lt;code style=&quot;color: red&quot;&gt;注意&lt;/code&gt; mac上一定要安装xcode，哪怕你不是ios开发工程师也是要安装的，因为在苹果上开发大多数操作都要依赖
    
    </summary>
    
      <category term="mysql" scheme="http://python-ning.github.io/categories/mysql/"/>
    
    
      <category term="mysql" scheme="http://python-ning.github.io/tags/mysql/"/>
    
  </entry>
  
  <entry>
    <title>读改善python程序的91个建议总结</title>
    <link href="http://python-ning.github.io/2016/04/18/reading_comprehension_python_1/"/>
    <id>http://python-ning.github.io/2016/04/18/reading_comprehension_python_1/</id>
    <published>2016-04-18T07:00:00.000Z</published>
    <updated>2016-05-11T21:49:08.000Z</updated>
    
    <content type="html">&lt;h3 id=&quot;建议一_字符串格式化，让可读性高一些&quot;&gt;建议一 字符串格式化，让可读性高一些&lt;/h3&gt;&lt;pre&gt;&lt;code&gt;&lt;span class=&quot;built_in&quot;&gt;print&lt;/span&gt; &lt;span class=&quot;string&quot;&gt;&#39;Hello %S&#39;&lt;/span&gt; %(&lt;span class=&quot;string&quot;&gt;&#39;Chen&#39;&lt;/span&gt;,)
=&lt;span class=&quot;function&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;built_in&quot;&gt;print&lt;/span&gt; &lt;span class=&quot;string&quot;&gt;&#39;Hello %(name)s!&#39;&lt;/span&gt; %{&lt;span class=&quot;string&quot;&gt;&#39;name&#39;&lt;/span&gt;: &lt;span class=&quot;string&quot;&gt;&#39;Chen&#39;&lt;/span&gt;}


value = {&lt;span class=&quot;string&quot;&gt;&#39;greet&#39;&lt;/span&gt;: &lt;span class=&quot;string&quot;&gt;&#39;Hello world&#39;&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&#39;language&#39;&lt;/span&gt;: &lt;span class=&quot;string&quot;&gt;&#39;Python&#39;&lt;/span&gt;}
&lt;span class=&quot;built_in&quot;&gt;print&lt;/span&gt; &lt;span class=&quot;string&quot;&gt;&#39;%(greet)s from %(language)s.&#39;&lt;/span&gt; % value
=&lt;span class=&quot;function&quot;&gt;=&amp;gt;&lt;/span&gt;  &lt;span class=&quot;built_in&quot;&gt;print&lt;/span&gt; &lt;span class=&quot;string&quot;&gt;&#39;{greet} from {language}&#39;&lt;/span&gt;.format(greet = &lt;span class=&quot;string&quot;&gt;&#39;Hello world&#39;&lt;/span&gt;, language = Python&lt;span class=&quot;string&quot;&gt;&#39;&#39;&lt;/span&gt;)
&lt;/code&gt;&lt;/pre&gt;&lt;h3 id=&quot;建议二_命名规则&quot;&gt;建议二 命名规则&lt;/h3&gt;&lt;p&gt;1.避免只用大小写来区分不同的对象&lt;br&gt;2.避免使用容易引起混淆的名称比如（0o混淆，l1混淆）&lt;br&gt;3.不要害怕过长的变量名。&lt;/p&gt;
&lt;p&gt;安装pep8&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;pip &lt;span class=&quot;keyword&quot;&gt;install&lt;/span&gt; -U pep8
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;检测代码&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;pep8 --first optparse&lt;span class=&quot;class&quot;&gt;.py&lt;/span&gt; 
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;显示详细不符合pep8的代码&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;&lt;span class=&quot;comment&quot;&gt;pep8&lt;/span&gt; &lt;span class=&quot;literal&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;literal&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;comment&quot;&gt;show&lt;/span&gt;&lt;span class=&quot;literal&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;comment&quot;&gt;source&lt;/span&gt; &lt;span class=&quot;literal&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;literal&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;comment&quot;&gt;show&lt;/span&gt;&lt;span class=&quot;literal&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;comment&quot;&gt;pep8&lt;/span&gt; &lt;span class=&quot;comment&quot;&gt;test&lt;/span&gt;&lt;span class=&quot;string&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;comment&quot;&gt;py&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;h3 id=&quot;建议六_编写函数的4个原则&quot;&gt;建议六 编写函数的4个原则&lt;/h3&gt;&lt;p&gt;1.函数设计要尽量短小，嵌套层次不宜过深，if elif while for 等循环判断的，最好能控制在3层以内。&lt;br&gt;2.函数声明应该做到合理、简单、易于使用，参数个数不宜过多，。&lt;br&gt;3.函数参数设计应该考虑向下兼容，比如一个函数，多加了一个参数，来记录功能的日志，要加一个默认参数，便于兼容。&lt;br&gt;4.一个函数只干一件事，尽量保证函数语句粒度的一致性，&lt;br&gt;python中函数设计的好习惯好包括：不要再函数中定义可变对象作为默认值，使用异常替换返回错误，保证通过单元测试等。&lt;/p&gt;
&lt;h3 id=&quot;建议七_将常量集中到一个文件&quot;&gt;建议七 将常量集中到一个文件&lt;/h3&gt;&lt;p&gt;通过命名风格来提醒使用者该变量代表的意义为常量，如常量名所有字母大写，用下划线连接各个单词，如MAX_OVERFLOW. 然而这种方式并没有实现真正的常量，其对应的值仍然可以改变，这只是一种约定俗成的风格。&lt;/p&gt;
&lt;p&gt;通过自定义的类实现常量功能。这要求符合”命名全部为大写”和”值一旦绑定便不可再修改”这两个条件。下面是一种较为常见的解决方法，他通过对常量对应的值进行修改时或者命名不符合规范时抛出异常来满足以上变量的两个条件。&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;&lt;span class=&quot;class&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;_const&lt;/span&gt;:&lt;/span&gt;
    &lt;span class=&quot;class&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;ConstError&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(TypeError)&lt;/span&gt;:&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;pass&lt;/span&gt;
    &lt;span class=&quot;class&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;ConstCaseerror&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(ConstError)&lt;/span&gt;:&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;pass&lt;/span&gt;

    &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;__setattr__&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(self,name, value)&lt;/span&gt;:&lt;/span&gt;
        &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; self.__dict__.has_key(name):
            &lt;span class=&quot;keyword&quot;&gt;raise&lt;/span&gt; self.ConstError, &lt;span class=&quot;string&quot;&gt;&quot;Can&#39;t change const.%s&quot;&lt;/span&gt; % name
        &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;not&lt;/span&gt; name.isupper():
            &lt;span class=&quot;keyword&quot;&gt;raise&lt;/span&gt; self.ConstError, &lt;span class=&quot;string&quot;&gt;&quot;const name &#39;%s&#39; is not all uppercase&quot;&lt;/span&gt; % name
        self.__dict__[name] = value
&lt;span class=&quot;keyword&quot;&gt;import&lt;/span&gt; sys
sys.modules[__name__] = _const()
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;如果上面的代码对应的模块名为const，使用的时候只需要import const,便可以直接定义常量了， 如以下代码:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;&lt;span class=&quot;keyword&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;const&lt;/span&gt;
&lt;span class=&quot;keyword&quot;&gt;const&lt;/span&gt;.COMPANY = &lt;span class=&quot;string&quot;&gt;&quot;IBM&quot;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;h3 id=&quot;利用assert语句来发现问题&quot;&gt;利用assert语句来发现问题&lt;/h3&gt;&lt;p&gt;断言在很多语言中都存在，在python中的语法是：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;assert expressio&lt;span class=&quot;label&quot;&gt;n1&lt;/span&gt; [&lt;span class=&quot;string&quot;&gt;&quot;,&quot;&lt;/span&gt; expressio&lt;span class=&quot;label&quot;&gt;n2&lt;/span&gt;]
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;其中计算expression1的值会返回True或者False， 当值为False的时候会引发AssertionError，而expression2是可选的，常用来传递具体的异常信息。&lt;/p&gt;
&lt;p&gt;python -O test.py 便可以禁用断言&lt;/p&gt;
&lt;p&gt;1.不要滥用，这是使用断言最基本的原则。&lt;br&gt;2.如果python本身的异常能够处理就不要再使用断言。&lt;br&gt;3.不要使用断言来检查用户的输入&lt;br&gt;4.在函数调用后，当需要确认返回值是否合理时可以使用断言&lt;br&gt;5.当条件是业务逻辑继续下去的先决条件时可以使用断言&lt;/p&gt;
&lt;h3 id=&quot;建议九_数据交换值的时候不推荐使用中间变量&quot;&gt;建议九 数据交换值的时候不推荐使用中间变量&lt;/h3&gt;&lt;p&gt;   c = a&lt;br&gt;   a = b&lt;br&gt;   b = c &lt;/p&gt;
&lt;p&gt;   ==&amp;gt; a,b = b,a&lt;/p&gt;
&lt;p&gt;运行两者效率不一样：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;In [&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;]: from timeit import Timer

In [&lt;span class=&quot;number&quot;&gt;2&lt;/span&gt;]: &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;title&quot;&gt;Timer&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(&lt;span class=&quot;string&quot;&gt;&#39;c = x;x=y;y=c&#39;&lt;/span&gt;,&lt;span class=&quot;string&quot;&gt;&#39;x = 2; y=3&#39;&lt;/span&gt;)&lt;/span&gt;&lt;/span&gt;
Out[&lt;span class=&quot;number&quot;&gt;2&lt;/span&gt;]: &amp;lt;timeit&lt;span class=&quot;class&quot;&gt;.Timer&lt;/span&gt; instance at &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;x7f58a8273830&amp;gt;

In [&lt;span class=&quot;number&quot;&gt;3&lt;/span&gt;]: &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;title&quot;&gt;Timer&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(&lt;span class=&quot;string&quot;&gt;&#39;c = x;x=y;y=c&#39;&lt;/span&gt;,&lt;span class=&quot;string&quot;&gt;&#39;x = 2; y=3&#39;&lt;/span&gt;)&lt;/span&gt;&lt;/span&gt;.&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;title&quot;&gt;timeit&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;()&lt;/span&gt;&lt;/span&gt;
Out[&lt;span class=&quot;number&quot;&gt;3&lt;/span&gt;]: &lt;span class=&quot;number&quot;&gt;0.03874492645263672&lt;/span&gt;

In [&lt;span class=&quot;number&quot;&gt;4&lt;/span&gt;]: &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;title&quot;&gt;Timer&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(&lt;span class=&quot;string&quot;&gt;&#39;x,y = y,x&#39;&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&#39;x=2;y=3&#39;&lt;/span&gt;)&lt;/span&gt;&lt;/span&gt;.&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;title&quot;&gt;timeit&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;()&lt;/span&gt;&lt;/span&gt;
Out[&lt;span class=&quot;number&quot;&gt;4&lt;/span&gt;]: &lt;span class=&quot;number&quot;&gt;0.03464508056640625&lt;/span&gt;

In [&lt;span class=&quot;number&quot;&gt;5&lt;/span&gt;]: 
&lt;/code&gt;&lt;/pre&gt;&lt;h3 id=&quot;建议十_充分利用_Lazy_evaluation的特性&quot;&gt;建议十 充分利用 Lazy evaluation的特性&lt;/h3&gt;&lt;p&gt;1.避免不必要的计算，带来性能上的提升，比如 if x and y ,在x为false的情况下y表达式的值不再计算，二对于if x or y, 当x的值为true的时候将直接返回,不再计算y的值。所以当我们循环一个比较大的数据，先从可能性比较高的一方去循环他，从而节省了时间，提高了效率&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;p&gt;节省空间，使得无限循环的数据结构成为可能。python中最典型的使用延迟计算的例子就是生成器表达式了，它仅在每次需要计算的时候通过yield产生所需要的元素。&lt;/p&gt;
&lt;p&gt; def fib():&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;&lt;span class=&quot;tag&quot;&gt;a&lt;/span&gt;, &lt;span class=&quot;tag&quot;&gt;b&lt;/span&gt; = &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;
while True:
    yield &lt;span class=&quot;tag&quot;&gt;a&lt;/span&gt; 
    &lt;span class=&quot;tag&quot;&gt;a&lt;/span&gt;, &lt;span class=&quot;tag&quot;&gt;b&lt;/span&gt; = &lt;span class=&quot;tag&quot;&gt;b&lt;/span&gt;, &lt;span class=&quot;tag&quot;&gt;a&lt;/span&gt; + b
&lt;/code&gt;&lt;/pre&gt;&lt;blockquote&gt;
&lt;blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;from itertools import islice&lt;br&gt;print list(islice(fib(), 5))&lt;br&gt; [0, 1, 1, 2, 3]&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/blockquote&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h3 id=&quot;建议12_不推荐使用type()&quot;&gt;建议12 不推荐使用type()&lt;/h3&gt;&lt;p&gt;基于内建类型扩展的用户自定义类型，type()函数并不能准确返回结果。&lt;br&gt;这时候用 isinstance(object, classinfo)&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;title&quot;&gt;isinstance&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(&lt;span class=&quot;number&quot;&gt;2&lt;/span&gt;, int)&lt;/span&gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;h3 id=&quot;建议13_当涉及触发运算的时候尽量先将操作数转换为浮点类型再做运算&quot;&gt;建议13 当涉及触发运算的时候尽量先将操作数转换为浮点类型再做运算&lt;/h3&gt;&lt;h3 id=&quot;建议14_eval()不安全&quot;&gt;建议14 eval()不安全&lt;/h3&gt;&lt;pre&gt;&lt;code&gt;__import__(&lt;span class=&quot;string&quot;&gt;&quot;os&quot;&lt;/span&gt;).&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;title&quot;&gt;system&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(&lt;span class=&quot;string&quot;&gt;&quot;dir&quot;&lt;/span&gt;)&lt;/span&gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;你的当前目录下的所有文件都出来了&lt;/p&gt;
&lt;h3 id=&quot;建议15_is_和_“==”&quot;&gt;建议15 is 和 “==”&lt;/h3&gt;&lt;p&gt;is的作用是用来检查对象的标识符是否一致的，也就是比较两个对象在内存中是否拥有同一块内存空间，它并不适合用来判断两个字符串是否相等；而”==”才是用来检验两个对象的值是否相等的，它实际调用内部&lt;strong&gt;eq&lt;/strong&gt;()方法。&lt;/p&gt;
&lt;h3 id=&quot;建议17_考虑兼容性，尽可能使用Unicode&quot;&gt;建议17 考虑兼容性，尽可能使用Unicode&lt;/h3&gt;&lt;p&gt;Python内建的字符串有两种类型：str和Unicode，它们拥有共同的祖先basestring。其中Unicode是Python2.0中引入的一种新的数据类型，所有的Unicode字符串都是Unicode类型的实例。创建一个Unicode字符相对简单。&lt;/p&gt;
&lt;p&gt;因此要解决乱码问题可以使用Unicode作为中间介质来完成转换。首先需要对读入的字符用UTF-8进行解码，然后再用GBK进行编码。修改后的结果如下：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;filehandle = &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;title&quot;&gt;open&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(&lt;span class=&quot;string&quot;&gt;&quot;test.txt&quot;&lt;/span&gt;,&lt;span class=&quot;string&quot;&gt;&#39;r&#39;&lt;/span&gt;)&lt;/span&gt;&lt;/span&gt;
print (filehandle.&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;title&quot;&gt;read&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;()&lt;/span&gt;&lt;/span&gt;.&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;title&quot;&gt;decode&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(&lt;span class=&quot;string&quot;&gt;&quot;utf-8&quot;&lt;/span&gt;)&lt;/span&gt;&lt;/span&gt;).&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;title&quot;&gt;encode&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(&lt;span class=&quot;string&quot;&gt;&quot;gbk&quot;&lt;/span&gt;)&lt;/span&gt;&lt;/span&gt;
filehandle.&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;title&quot;&gt;close&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;()&lt;/span&gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;关于BOM：&lt;br&gt;Unicode存储有字节序的问题，例如“汉”字的Unicode编码是0X6C49，如果将6C写在前面，则为big endian，将49写在前面则成为little endian。UTF-16以两个字节为编码单元，在字符的传送过程中，为了标明字节的顺序，Unicode规范中推荐使用BOM（Byte Order Mark）：即在 UCS编码中用一个叫做ZERO WIDTH NO-BREAK SPACE的字符，它的编码是FEFF（该编码在UCS中不存在对应的字符），UCS规范建议在传输字节流前，先传输字符ZERO WIDTH NO-BREAK SPACE。这样如果接收者收到FEFF，就表明这个字节流是Big-Endian的；如果收到FFFE，就表明这个字节流是Little-Endian的。 UTF-8使用字节来编码，一般不需要BOM来表明字节顺序，但可以用BOM来表明编码方式。字符ZERO WIDTH NO-BREAK SPACE的UTF-8编码是EF BB BF。所以如果接收者收到以EF BB BF开头的字节流，就知道这是UTF-8编码了。&lt;/p&gt;
&lt;p&gt;示例二分析：Python中默认的编码是ASCII编码（这点可以通过sys.getdefaultencoding()来验证），所以unicodetest.py文件是以ASCII形式保存的，s是包含中文字符的普通字符串。当调用print方法输出的时候会隐式地进行从ASCII到系统默认编码（Windows上为CP936）的转换，中文字符并不是ASCII字符，而此时源文件中又未指定其他编码方式，Python解释器并不知道如何正确处理这种情况，便会抛出异常：SyntaxError: Non-ASCII character ‘\xd6’ in file unicodetest.py on line 1。因此，要避免这种错误需要在源文件中进行编码声明，声明可用正则表达式&lt;br&gt;“coding[:=]\s*([-\w.]+)”表示。一般来说进行源文件编码声明有以下3种方式：&lt;/p&gt;
&lt;p&gt;第一种声明方式：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;&lt;span class=&quot;preprocessor&quot;&gt;# coding=&lt;span class=&quot;title&quot;&gt;&amp;lt;encoding name&amp;gt;&lt;/span&gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;第二种声明方式：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;&lt;span class=&quot;shebang&quot;&gt;#!/usr/bin/python&lt;/span&gt;
# -*- coding: &amp;lt;encoding name&amp;gt; -*-
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;第三种声明方式：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;&lt;span class=&quot;shebang&quot;&gt;#!/usr/bin/python&lt;/span&gt;
# vim: set fileencoding=&amp;lt;encoding name&amp;gt; :
&lt;/code&gt;&lt;/pre&gt;&lt;h3 id=&quot;建议18：构建合理的包层次来管理module&quot;&gt;建议18：构建合理的包层次来管理module&lt;/h3&gt;&lt;p&gt;什么是包呢？简单说包即是目录，但与普通目录不同，它除了包含常规的Python文件（也就是模块）以外，还包含一个&lt;strong&gt;init&lt;/strong&gt;.py文件，同时它允许嵌套。包结构如下：&lt;br&gt;        Package/ &lt;strong&gt;init&lt;/strong&gt;.py&lt;br&gt;        Module1.py&lt;br&gt;        Module2.py&lt;br&gt;        Subpackage/ &lt;strong&gt;init&lt;/strong&gt;.py&lt;br&gt;        Module1.py&lt;br&gt;        Module2.py&lt;/p&gt;
&lt;p&gt;以下是一个可供参考的Python项目结构：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;ProjectName/
|&lt;span class=&quot;string&quot;&gt;---README
&lt;/span&gt;|&lt;span class=&quot;string&quot;&gt;----LICENSE
&lt;/span&gt;|&lt;span class=&quot;string&quot;&gt;----setup.py
&lt;/span&gt;|&lt;span class=&quot;string&quot;&gt;-----requirements.txt
&lt;/span&gt;|&lt;span class=&quot;string&quot;&gt;------sample/
&lt;/span&gt;|&lt;span class=&quot;string&quot;&gt;    &lt;/span&gt;|&lt;span class=&quot;string&quot;&gt;----__init__.py
&lt;/span&gt;|&lt;span class=&quot;string&quot;&gt;    &lt;/span&gt;|&lt;span class=&quot;string&quot;&gt;----core.py
&lt;/span&gt;|&lt;span class=&quot;string&quot;&gt;    &lt;/span&gt;|&lt;span class=&quot;string&quot;&gt;----helpers.py
&lt;/span&gt;|&lt;span class=&quot;string&quot;&gt;------docs/
&lt;/span&gt;|&lt;span class=&quot;string&quot;&gt;    &lt;/span&gt;|&lt;span class=&quot;string&quot;&gt;------conf.py
&lt;/span&gt;|&lt;span class=&quot;string&quot;&gt;    &lt;/span&gt;|&lt;span class=&quot;string&quot;&gt;------index.rst
&lt;/span&gt;|&lt;span class=&quot;string&quot;&gt;------bin/
&lt;/span&gt;|&lt;span class=&quot;string&quot;&gt;------package/
&lt;/span&gt;|&lt;span class=&quot;string&quot;&gt;    &lt;/span&gt;|&lt;span class=&quot;string&quot;&gt;-----__init__.py
&lt;/span&gt;|&lt;span class=&quot;string&quot;&gt;    &lt;/span&gt;|&lt;span class=&quot;string&quot;&gt;-----subpackage/
&lt;/span&gt;|&lt;span class=&quot;string&quot;&gt;    &lt;/span&gt;|&lt;span class=&quot;string&quot;&gt;------........
&lt;/span&gt;|&lt;span class=&quot;string&quot;&gt;------tests/
&lt;/span&gt;|&lt;span class=&quot;string&quot;&gt;    &lt;/span&gt;|&lt;span class=&quot;string&quot;&gt;------test_basic.py
&lt;/span&gt;|&lt;span class=&quot;string&quot;&gt;    &lt;/span&gt;|&lt;span class=&quot;string&quot;&gt;------test_advanced.py&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;h3 id=&quot;建议19：有节制地使用from…import语句&quot;&gt;建议19：有节制地使用from…import语句&lt;/h3&gt;&lt;p&gt;在使用import的时候注意以下几点：&lt;br&gt;·一般情况下尽量优先使用import a形式，如访问B时需要使用a.B的形式。&lt;br&gt;·有节制地使用from a import B形式，可以直接访问B。&lt;br&gt;·尽量避免使用from a import *，因为这会污染命名空间，并且无法清晰地表示导入了哪些对象&lt;/p&gt;
&lt;p&gt;为什么在使用import的时候要注意以上几点呢？在回答这个问题之前先来简单了解一下Python的import机制。Python在初始化运行环境的时候会预先加载一批内建模块到内存中，这些模块相关的信息被存放在sys.modules中。读者导入sys模块后在Python解释器中输入sys.modules.items()便可显示所有预加载模块的相关信息。当加载一个模块的时候，解释器实际上要完成以下动作：&lt;br&gt;1）在sys.modules中进行搜索看看该模块是否已经存在，如果存在，则将其导入到当前局部命名空间，加载结束。&lt;br&gt;2）如果在sys.modules中找不到对应模块的名称，则为需要导入的模块创建一个字典对象，并将该对象信息插入sys.modules中。&lt;br&gt;3）加载前确认是否需要对模块对应的文件进行编译，如果需要则先进行编译。&lt;br&gt;4）执行动态加载，在当前模块的命名空间中执行编译后的字节码，并将其中所有的对象放入模块对应的字典中。&lt;/p&gt;
&lt;h3 id=&quot;建议20：优先使用absolute_import来导入模块&quot;&gt;建议20：优先使用absolute import来导入模块&lt;/h3&gt;&lt;p&gt;假设有如下文件结构，其中app/sub1/string.py中定义了一个lower()方法，那么当在mod1.py中import string之后再使用string.lower()方法时，到底引用的是sub1/string.py中的lower()方法，还是Python标准库中string里面的lower()方法呢？&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;app/
__init__&lt;span class=&quot;class&quot;&gt;.py&lt;/span&gt;
sub1/
__init__&lt;span class=&quot;class&quot;&gt;.py&lt;/span&gt;
mod1&lt;span class=&quot;class&quot;&gt;.py&lt;/span&gt;
string&lt;span class=&quot;class&quot;&gt;.py&lt;/span&gt;
sub2/
__init__&lt;span class=&quot;class&quot;&gt;.py&lt;/span&gt;
mod2.py
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;从程序的输出会发现，它引用的是app/sub1/string.py中的lower()方法。显然解释器默认先从当前目录下搜索对应的模块，当搜到string.py的时候便停止搜索进行动态加载。那么，如果要使用Python自带的string模块中的方法，该怎么实现呢？这就涉及absolute import和relative import相关的话题了。&lt;br&gt;在Python2.4以前默认为隐式的relative import，局部范围的模块将覆盖同名的全局范围的模块。如果要使用标注库中同名的模块，你不得不去深入考察sys.modules一番，显然这并不是一种非常友好的做法。Python2.5中后虽然默认的仍然是relative import，但它为absolute import提供了一种新的机制，在模块中使用from &lt;strong&gt;future&lt;/strong&gt; import absolute_import 语句进行说明后再进行导入。同时它还通过点号提供了一种显式进行relative import的方法，“.”表示当前目录，“..”表示当前目录的上一层目录。例如想在mod1.py中导入string.py，可以使用from . import string，其中mod1所在的包层次结构为app.sub1.mod1，“.”表示app.sub1；如果想导入sub2/mo2.py可以使用from ..sub2 import mod2，“..”代表的是app。&lt;br&gt;但事情是不是就此结束了呢？远不止，使用显式relative import之后再运行程序一不小心你就有可能遇到这种错误“ValueError: Attempted relative import in non-package”。这是什么原因呢？这个问题产生的原因在于relative import使用模块的&lt;strong&gt;name&lt;/strong&gt;属性来决定当前模块在包层次结构中的位置，如果当前的模块名称中不包含任何包的信息，那么它将默认为模块在包的顶层位置，而不管模块在文件系统中的实际位置。而在relative import的情形下，&lt;strong&gt;name&lt;/strong&gt;会随着文件加载方式的不同而发生改变，上例中如在目录app/sub1/下运行Python mod1.py，会发现模块的&lt;strong&gt;name&lt;/strong&gt;为&lt;strong&gt;main&lt;/strong&gt;，但如果在目录app/sub1/下运行Python-m mod1.py，会发现&lt;strong&gt;name&lt;/strong&gt;变为mod1。其中-m的作用是使得一个模块像脚本一样运行。而无论以何种方式加载，当在包的内部运行脚本的时候，包相关的结构信息都会丢失，默认当前脚本所在的位置为模块在包中的顶层位置，因此便会抛出异常。如果确实需要将模块当作脚本一样运行，解决方法之一是在包的顶层目录中加入参数-m运行该脚本，上例中如果要运行脚本mod1.py可以在app所在的目录的位置输入Python -m app.sub1.mod1。另一个解决这个问题的方法是利用Python2.6在模块中引入的&lt;strong&gt;package&lt;/strong&gt;属性，设置&lt;strong&gt;package&lt;/strong&gt;之后，解释器会根据&lt;strong&gt;package&lt;/strong&gt;和&lt;strong&gt;name&lt;/strong&gt;的值来确定包的层次结构。上面的例子中如果将mod1.py修改为以下形式便不会出现在包结构内运行模块对应的脚本时出错的情况了。&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;&lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; __name__ == &lt;span class=&quot;string&quot;&gt;&quot;__main__&quot;&lt;/span&gt; and __package__ is None:
import sys
import os&lt;span class=&quot;class&quot;&gt;.path&lt;/span&gt;
sys&lt;span class=&quot;class&quot;&gt;.path&lt;/span&gt;[&lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;] = os&lt;span class=&quot;class&quot;&gt;.path&lt;/span&gt;&lt;span class=&quot;class&quot;&gt;.abspath&lt;/span&gt;(&lt;span class=&quot;string&quot;&gt;&quot;./../../&quot;&lt;/span&gt;)
print sys&lt;span class=&quot;class&quot;&gt;.path&lt;/span&gt;[&lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;]
import app&lt;span class=&quot;class&quot;&gt;.sub1&lt;/span&gt;
__package__ =  &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;title&quot;&gt;str&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(&lt;span class=&quot;string&quot;&gt;&#39;app.sub1&#39;&lt;/span&gt;)&lt;/span&gt;&lt;/span&gt;
from . import string
&lt;/code&gt;&lt;/pre&gt;&lt;h3 id=&quot;建议26：_深入理解None，正确判断对象是否为空&quot;&gt;建议26： 深入理解None，正确判断对象是否为空&lt;/h3&gt;&lt;pre&gt;&lt;code&gt;&lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; xxx &lt;span class=&quot;keyword&quot;&gt;is&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;not&lt;/span&gt; None:
    &lt;span class=&quot;keyword&quot;&gt;Do&lt;/span&gt; something 
&lt;span class=&quot;keyword&quot;&gt;else&lt;/span&gt;：
    &lt;span class=&quot;keyword&quot;&gt;Not&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;do&lt;/span&gt; something 
    上边会走到&lt;span class=&quot;keyword&quot;&gt;else&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;只有None == None是True， 其他像0，[], (),’’等都是False&lt;/p&gt;
&lt;p&gt;大多是情况下用&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;&lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt;(XXX): 
    &lt;span class=&quot;keyword&quot;&gt;do&lt;/span&gt; &lt;span class=&quot;literal&quot;&gt;or&lt;/span&gt; &lt;span class=&quot;literal&quot;&gt;not&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;do&lt;/span&gt; 
&lt;/code&gt;&lt;/pre&gt;&lt;h3 id=&quot;建议27_连接字符串用join比”+”好&quot;&gt;建议27 连接字符串用join比”+”好&lt;/h3&gt;&lt;p&gt;效率要高&lt;/p&gt;
&lt;h3 id=&quot;建议28_-format&quot;&gt;建议28 .format&lt;/h3&gt;&lt;pre&gt;&lt;code&gt;&lt;span class=&quot;type&quot;&gt;In&lt;/span&gt; [&lt;span class=&quot;number&quot;&gt;15&lt;/span&gt;]: &lt;span class=&quot;symbol&quot;&gt;&#39;adasd&lt;/span&gt; asd &lt;span class=&quot;keyword&quot;&gt;as&lt;/span&gt; asd  {&lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;} id {&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;}&lt;span class=&quot;char&quot;&gt;&#39;.format(&#39;&lt;/span&gt;ning&#39;,&lt;span class=&quot;symbol&quot;&gt;&#39;chen&#39;&lt;/span&gt;)
&lt;span class=&quot;type&quot;&gt;Out&lt;/span&gt;[&lt;span class=&quot;number&quot;&gt;15&lt;/span&gt;]: &lt;span class=&quot;symbol&quot;&gt;&#39;adasd&lt;/span&gt; asd &lt;span class=&quot;keyword&quot;&gt;as&lt;/span&gt; asd  ning id chen&#39;
&lt;/code&gt;&lt;/pre&gt;&lt;h3 id=&quot;建议31_重点_记住函数传参既不是传值也不是传引用&quot;&gt;建议31 重点 记住函数传参既不是传值也不是传引用&lt;/h3&gt;&lt;p&gt;python中的函数参数既不是传值也不是传引用，也不是可变对象传引用，不可变对象传值，正确的叫法应该是传对象(call by object)或者说传对象的引用(call-by-object-reference)。函数参数在传递的过程中将整个对象传入，对可变对象的修改在函数外部以及内部都可见，调用者和被调用者之间共享这个对象，二对于不可变对象，由于并不能真正被修改，因此，修改往往是通过生成一个新对象然后复制来实现。&lt;/p&gt;
&lt;h3 id=&quot;建议36_掌握字符串的基本用法&quot;&gt;建议36 掌握字符串的基本用法&lt;/h3&gt;&lt;p&gt;basestring 包括str 和 unicode&lt;/p&gt;
&lt;p&gt;字符串方法：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;title&quot;&gt;isalnum&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;()&lt;/span&gt;&lt;/span&gt;
&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;title&quot;&gt;isalpha&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;()&lt;/span&gt;&lt;/span&gt;
&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;title&quot;&gt;isdigit&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;()&lt;/span&gt;&lt;/span&gt;
&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;title&quot;&gt;islower&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;()&lt;/span&gt;&lt;/span&gt;
&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;title&quot;&gt;isupper&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;()&lt;/span&gt;&lt;/span&gt;
&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;title&quot;&gt;isspace&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;()&lt;/span&gt;&lt;/span&gt;
&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;title&quot;&gt;istitle&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;()&lt;/span&gt;&lt;/span&gt;
&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;title&quot;&gt;startswith&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;()&lt;/span&gt;&lt;/span&gt;
&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;title&quot;&gt;endwith&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;()&lt;/span&gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;h3 id=&quot;建议14_eval()不安全-1&quot;&gt;建议14 eval()不安全&lt;/h3&gt;&lt;h3 id=&quot;建议14_eval()不安全-2&quot;&gt;建议14 eval()不安全&lt;/h3&gt;&lt;h3 id=&quot;建议14_eval()不安全-3&quot;&gt;建议14 eval()不安全&lt;/h3&gt;&lt;h3 id=&quot;建议14_eval()不安全-4&quot;&gt;建议14 eval()不安全&lt;/h3&gt;&lt;h3 id=&quot;建议14_eval()不安全-5&quot;&gt;建议14 eval()不安全&lt;/h3&gt;&lt;h3 id=&quot;建议14_eval()不安全-6&quot;&gt;建议14 eval()不安全&lt;/h3&gt;&lt;h3 id=&quot;建议14_eval()不安全-7&quot;&gt;建议14 eval()不安全&lt;/h3&gt;&lt;h3 id=&quot;建议14_eval()不安全-8&quot;&gt;建议14 eval()不安全&lt;/h3&gt;&lt;h3 id=&quot;建议14_eval()不安全-9&quot;&gt;建议14 eval()不安全&lt;/h3&gt;&lt;h3 id=&quot;建议14_eval()不安全-10&quot;&gt;建议14 eval()不安全&lt;/h3&gt;&lt;h3 id=&quot;建议14_eval()不安全-11&quot;&gt;建议14 eval()不安全&lt;/h3&gt;&lt;h3 id=&quot;建议14_eval()不安全-12&quot;&gt;建议14 eval()不安全&lt;/h3&gt;&lt;h3 id=&quot;建议14_eval()不安全-13&quot;&gt;建议14 eval()不安全&lt;/h3&gt;&lt;h3 id=&quot;建议14_eval()不安全-14&quot;&gt;建议14 eval()不安全&lt;/h3&gt;&lt;h3 id=&quot;建议14_eval()不安全-15&quot;&gt;建议14 eval()不安全&lt;/h3&gt;&lt;h3 id=&quot;建议14_eval()不安全-16&quot;&gt;建议14 eval()不安全&lt;/h3&gt;&lt;h3 id=&quot;建议14_eval()不安全-17&quot;&gt;建议14 eval()不安全&lt;/h3&gt;&lt;h3 id=&quot;建议14_eval()不安全-18&quot;&gt;建议14 eval()不安全&lt;/h3&gt;&lt;h3 id=&quot;建议14_eval()不安全-19&quot;&gt;建议14 eval()不安全&lt;/h3&gt;&lt;h3 id=&quot;建议14_eval()不安全-20&quot;&gt;建议14 eval()不安全&lt;/h3&gt;&lt;h3 id=&quot;建议14_eval()不安全-21&quot;&gt;建议14 eval()不安全&lt;/h3&gt;&lt;h3 id=&quot;建议14_eval()不安全-22&quot;&gt;建议14 eval()不安全&lt;/h3&gt;&lt;h3 id=&quot;建议14_eval()不安全-23&quot;&gt;建议14 eval()不安全&lt;/h3&gt;&lt;h3 id=&quot;建议14_eval()不安全-24&quot;&gt;建议14 eval()不安全&lt;/h3&gt;&lt;h3 id=&quot;建议14_eval()不安全-25&quot;&gt;建议14 eval()不安全&lt;/h3&gt;&lt;h3 id=&quot;建议14_eval()不安全-26&quot;&gt;建议14 eval()不安全&lt;/h3&gt;&lt;h3 id=&quot;建议14_eval()不安全-27&quot;&gt;建议14 eval()不安全&lt;/h3&gt;&lt;h3 id=&quot;建议14_eval()不安全-28&quot;&gt;建议14 eval()不安全&lt;/h3&gt;&lt;h3 id=&quot;建议14_eval()不安全-29&quot;&gt;建议14 eval()不安全&lt;/h3&gt;</content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;建议一_字符串格式化，让可读性高一些&quot;&gt;建议一 字符串格式化，让可读性高一些&lt;/h3&gt;&lt;pre&gt;&lt;code&gt;&lt;span class=&quot;built_in&quot;&gt;print&lt;/span&gt; &lt;span class=&quot;string&quot;&gt;&#39;Hello %S&#39;&lt;/span&gt; %(&lt;
    
    </summary>
    
      <category term="python" scheme="http://python-ning.github.io/categories/python/"/>
    
    
      <category term="总结" scheme="http://python-ning.github.io/tags/%E6%80%BB%E7%BB%93/"/>
    
  </entry>
  
  <entry>
    <title>django(八)五步教你实现使用Nginx+uWSGI+Django方法部署Django程序(上)</title>
    <link href="http://python-ning.github.io/2016/04/14/python_django_uwsgi/"/>
    <id>http://python-ning.github.io/2016/04/14/python_django_uwsgi/</id>
    <published>2016-04-14T07:00:00.000Z</published>
    <updated>2016-04-14T17:49:14.000Z</updated>
    
    <content type="html">&lt;p&gt;Django的部署可以有很多方式，采用nginx+uwsgi的方式是其中比较常见的一种方式。&lt;/p&gt;
&lt;p&gt;在这种方式中，我们的通常做法是，将nginx作为服务器最前端，它将接收WEB的所有请求，统一管理请求。nginx把所有静态请求自己来处理（这是NGINX的强项）。然后，NGINX将所有非静态请求通过uwsgi传递给Django，由Django来进行处理，从而完成一次WEB请求。&lt;/p&gt;
&lt;p&gt;可见，uwsgi的作用就类似一个桥接器。起到桥梁的作用。不使用nginx，只使用uwsgi+django也是可以实现WEB服务的。uwsgi也可以直接处理WEB请求。&lt;/p&gt;
&lt;p&gt;为了完成上述的方式部署，我将分成两篇文章来分别进行阐述。&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;第一步先解决uwsgi与django的桥接。解决在没有nginx的情况下，如何使用uwsgi+DJANGO来实现一个简单的WEB服务器。

第二步解决uwsgi与Nginx的桥接。通过nginx与uwsgi的桥接，打通nginx与django的连通，从而比较完美的实现django的部署。
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;本文将分成五步来详细阐述uwsgi+django的部署方式。nginx+uwsgi+django的部署将在下一篇 文章中阐述。&lt;/p&gt;
&lt;p&gt;环境介绍&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;Ubuntu &lt;span class=&quot;number&quot;&gt;12.04&lt;/span&gt;&lt;span class=&quot;number&quot;&gt;.1&lt;/span&gt; LTS
django &lt;span class=&quot;number&quot;&gt;1.4&lt;/span&gt;&lt;span class=&quot;number&quot;&gt;.2&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;h3 id=&quot;安装uwsgi&quot;&gt;安装uwsgi&lt;/h3&gt;&lt;p&gt;1.安装pip&lt;/p&gt;
&lt;p&gt;可以参考这篇文章：&lt;a href=&quot;http://www.jsxubar.info/install-pip.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;http://www.jsxubar.info/install-pip.html&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;2.安装uwsgi&lt;/p&gt;
&lt;p&gt;$ export LDFLAGS=”-Xlinker –no-as-needed”&lt;br&gt;$ pip install uwsgi&lt;/p&gt;
&lt;h3 id=&quot;测试uwsgi&quot;&gt;测试uwsgi&lt;/h3&gt;&lt;p&gt;在你的机器上写一个test.py&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;&lt;span class=&quot;comment&quot;&gt;# test.py&lt;/span&gt;
&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;application&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(env, start_response)&lt;/span&gt;:&lt;/span&gt;
    start_response(&lt;span class=&quot;string&quot;&gt;&#39;200 OK&#39;&lt;/span&gt;, [(&lt;span class=&quot;string&quot;&gt;&#39;Content-Type&#39;&lt;/span&gt;,&lt;span class=&quot;string&quot;&gt;&#39;text/html&#39;&lt;/span&gt;)])
    &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;string&quot;&gt;&quot;Hello World&quot;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;然后执行shell命令：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;&lt;span class=&quot;comment&quot;&gt;uwsgi&lt;/span&gt; &lt;span class=&quot;literal&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;literal&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;comment&quot;&gt;http&lt;/span&gt; &lt;span class=&quot;comment&quot;&gt;:8001&lt;/span&gt; &lt;span class=&quot;literal&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;literal&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;comment&quot;&gt;wsgi&lt;/span&gt;&lt;span class=&quot;literal&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;comment&quot;&gt;file&lt;/span&gt; &lt;span class=&quot;comment&quot;&gt;test&lt;/span&gt;&lt;span class=&quot;string&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;comment&quot;&gt;py&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;访问网页：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;&lt;span class=&quot;string&quot;&gt;http:&lt;/span&gt;&lt;span class=&quot;comment&quot;&gt;//127.0.0.1:8001/&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;看在网页上是否有Hello World&lt;/p&gt;
&lt;h3 id=&quot;配置django&quot;&gt;配置django&lt;/h3&gt;&lt;pre&gt;&lt;code&gt;&lt;span class=&quot;tag&quot;&gt;NOTE&lt;/span&gt;：
请保证你的&lt;span class=&quot;tag&quot;&gt;django&lt;/span&gt;项目是正常使用的。可以使用
&lt;span class=&quot;tag&quot;&gt;python&lt;/span&gt; &lt;span class=&quot;tag&quot;&gt;manage&lt;/span&gt;&lt;span class=&quot;class&quot;&gt;.py&lt;/span&gt; &lt;span class=&quot;tag&quot;&gt;runserver&lt;/span&gt; 0&lt;span class=&quot;class&quot;&gt;.0&lt;/span&gt;&lt;span class=&quot;class&quot;&gt;.0&lt;/span&gt;&lt;span class=&quot;class&quot;&gt;.0&lt;/span&gt;&lt;span class=&quot;pseudo&quot;&gt;:8002&lt;/span&gt;
来测试一下你的&lt;span class=&quot;tag&quot;&gt;django&lt;/span&gt;项目是否能正常跑起来。
请保证你的&lt;span class=&quot;tag&quot;&gt;django&lt;/span&gt;程序已经关闭。
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;编写django_wsgi.py文件，将其放在与文件manage.py同一个目录下。&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;注意： 编写文件时需要注意语句os.environ.setdefault。比如，如果你的项目为mysite，则你的语句应该是 os.environ.setdefault(&lt;span class=&quot;string&quot;&gt;&quot;DJANGO_SETTINGS_MODULE&quot;&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&quot;mysite.settings&quot;&lt;/span&gt;)&lt;span class=&quot;preprocessor&quot;&gt;

    #!/usr/bin/env python&lt;/span&gt;&lt;span class=&quot;preprocessor&quot;&gt;
    # coding: utf-8&lt;/span&gt;

    &lt;span class=&quot;preprocessor&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;import&lt;/span&gt; os&lt;/span&gt;
    &lt;span class=&quot;preprocessor&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;import&lt;/span&gt; sys&lt;/span&gt;&lt;span class=&quot;preprocessor&quot;&gt;

    # 将系统的编码设置为UTF8&lt;/span&gt;

    reload(sys)
    sys.setdefaultencoding(&lt;span class=&quot;comment&quot;&gt;&#39;utf8&#39;)&lt;/span&gt;

    os.environ.setdefault(&lt;span class=&quot;string&quot;&gt;&quot;DJANGO_SETTINGS_MODULE&quot;&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&quot;mysite.settings&quot;&lt;/span&gt;)

    from django.core.handlers.wsgi &lt;span class=&quot;preprocessor&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;import&lt;/span&gt; WSGIHandler&lt;/span&gt;
    application = WSGIHandler()
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;连接django和uwsgi，实现简单的WEB服务器。&lt;/p&gt;
&lt;p&gt;我们假设你的Django项目的地址是/root/home/www/django_blog，&lt;/p&gt;
&lt;p&gt;然后，就可以执行以下命令：&lt;/p&gt;
&lt;p&gt;uwsgi –http :8000 –chdir /root/home/www/django_blog –module django_wsgi&lt;/p&gt;
&lt;p&gt;这样，你就可以在浏览器中访问你的Django程序了。所有的请求都是经过uwsgi传递给Django程序的。&lt;/p&gt;
&lt;p&gt;转载于&lt;a href=&quot;http://www.django-china.cn/topic/101/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;django中国社区&lt;/a&gt;&lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;p&gt;Django的部署可以有很多方式，采用nginx+uwsgi的方式是其中比较常见的一种方式。&lt;/p&gt;
&lt;p&gt;在这种方式中，我们的通常做法是，将nginx作为服务器最前端，它将接收WEB的所有请求，统一管理请求。nginx把所有静态请求自己来处理（这是NGINX的强项）。然后
    
    </summary>
    
      <category term="python" scheme="http://python-ning.github.io/categories/python/"/>
    
    
      <category term="django" scheme="http://python-ning.github.io/tags/django/"/>
    
  </entry>
  
  <entry>
    <title>https工作原理</title>
    <link href="http://python-ning.github.io/2016/04/13/good_article_collect_https/"/>
    <id>http://python-ning.github.io/2016/04/13/good_article_collect_https/</id>
    <published>2016-04-13T07:00:00.000Z</published>
    <updated>2016-04-13T18:43:12.000Z</updated>
    
    <content type="html">&lt;p&gt;HTTPS其实是有两部分组成：HTTP + SSL/TLS，也就是在HTTP上又加了一层处理加密信息的模块。服务端和客户端的信息传输都会通过TLS进行加密，所以传输的数据都是加密后的数据&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://7xojjc.com1.z0.glb.clouddn.com/https.png&quot; class=&quot;img-shadow&quot; style=&quot;display: block;margin: auto&quot;&gt;&lt;/p&gt;
&lt;h3 id=&quot;客户端发起HTTPS请求&quot;&gt;客户端发起HTTPS请求&lt;/h3&gt;&lt;p&gt;这个没什么好说的，就是用户在浏览器里输入一个https网址，然后连接到server的443端口。&lt;/p&gt;
&lt;h3 id=&quot;服务端的配置&quot;&gt;服务端的配置&lt;/h3&gt;&lt;p&gt;采用HTTPS协议的服务器必须要有一套数字证书，如果没有请联系易维信客服购买全球信任的SSL证书，而使用受信任的CA签发的证书则不会弹出提示页面(GeoTrust,Symantec都是知名的CA机构)。这套证书其实就是一对公钥和私钥。如果对公钥和私钥不太理解，可以想象成一把钥匙和一个锁头，只是全世界只有你一个人有这把钥匙，你可以把锁头给别人，别人可以用这个锁把重要的东西锁起来，然后发给你，因为只有你一个人有这把钥匙，所以只有你才能看到被这把锁锁起来的东西。&lt;/p&gt;
&lt;h3 id=&quot;传送证书&quot;&gt;传送证书&lt;/h3&gt;&lt;p&gt;这个证书其实就是公钥，只是包含了很多信息，如证书的颁发机构，过期时间等等。&lt;/p&gt;
&lt;h3 id=&quot;客户端解析证书&quot;&gt;客户端解析证书&lt;/h3&gt;&lt;p&gt;这部分工作是有客户端的TLS来完成的，首先会验证公钥是否有效，比如颁发机构，过期时间等等，如果发现异常，则会弹出一个警告框，提示证书存在问题。如果证书没有问题，那么就生成一个随即值。然后用证书对该随机值进行加密。就好像上面说的，把随机值用锁头锁起来，这样除非有钥匙，不然看不到被锁住的内容。&lt;/p&gt;
&lt;h3 id=&quot;传送加密信息&quot;&gt;传送加密信息&lt;/h3&gt;&lt;p&gt;这部分传送的是用证书加密后的随机值，目的就是让服务端得到这个随机值，以后客户端和服务端的通信就可以通过这个随机值来进行加密解密了。&lt;/p&gt;
&lt;h3 id=&quot;服务段解密信息&quot;&gt;服务段解密信息&lt;/h3&gt;&lt;p&gt;服务端用私钥解密后，得到了客户端传过来的随机值(私钥)，然后把内容通过该值进行对称加密。所谓对称加密就是，将信息和私钥通过某种算法混合在一起，这样除非知道私钥，不然无法获取内容，而正好客户端和服务端都知道这个私钥，所以只要加密算法够彪悍，私钥够复杂，数据就够安全。&lt;/p&gt;
&lt;h3 id=&quot;传输加密后的信息&quot;&gt;传输加密后的信息&lt;/h3&gt;&lt;p&gt;这部分信息是服务段用私钥加密后的信息，可以在客户端被还原&lt;/p&gt;
&lt;h3 id=&quot;客户端解密信息&quot;&gt;客户端解密信息&lt;/h3&gt;&lt;p&gt;客户端用之前生成的私钥解密服务段传过来的信息，于是获取了解密后的内容。整个过程第三方即使监听到了数据，也束手无策。&lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;p&gt;HTTPS其实是有两部分组成：HTTP + SSL/TLS，也就是在HTTP上又加了一层处理加密信息的模块。服务端和客户端的信息传输都会通过TLS进行加密，所以传输的数据都是加密后的数据&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://7xojjc.com1.z0.glb.
    
    </summary>
    
      <category term="好文章收集" scheme="http://python-ning.github.io/categories/%E5%A5%BD%E6%96%87%E7%AB%A0%E6%94%B6%E9%9B%86/"/>
    
    
      <category term="https" scheme="http://python-ning.github.io/tags/https/"/>
    
  </entry>
  
  <entry>
    <title>Django(七)配置及使用富文本编辑器ckeditor</title>
    <link href="http://python-ning.github.io/2016/04/12/python_django_blog_ckeditor/"/>
    <id>http://python-ning.github.io/2016/04/12/python_django_blog_ckeditor/</id>
    <published>2016-04-12T07:00:00.000Z</published>
    <updated>2016-04-13T18:52:06.000Z</updated>
    
    <content type="html">&lt;p&gt;&lt;img src=&quot;http://7xojjc.com1.z0.glb.clouddn.com/319037-106.jpg&quot; class=&quot;img-shadow&quot; style=&quot;display: block;margin: auto&quot;&gt;&lt;/p&gt;
&lt;p&gt;当你想入门django的时候，一般大家都会选择搭建一个博客系统来学习django，而当你发现你写文章需要格式，需要样式，需要不仅仅是文字的时候，这时你就会需要到富文本编辑器，富文本编辑器包括kindeditor、ckeditor、uEditor等等。这里介绍一下ckeditor的配置和使用，他们大概的原理是一样的。&lt;/p&gt;
&lt;h3 id=&quot;安装django-ckeditor&quot;&gt;安装django-ckeditor&lt;/h3&gt;&lt;p&gt;&lt;code style=&quot;color: red&quot;&gt;django-ckeditor&lt;/code&gt;的下载地址：&lt;a href=&quot;https://github.com/shaunsephton/django-ckeditor&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;https://github.com/shaunsephton/django-ckeditor&lt;/a&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;&lt;span class=&quot;preprocessor&quot;&gt;# 安装git 自行百度， 这里用的ubuntu14.04系统&lt;/span&gt;
git clone https:&lt;span class=&quot;comment&quot;&gt;//github.com/shaunsephton/django-ckeditor&lt;/span&gt;
&lt;span class=&quot;preprocessor&quot;&gt;# 打开你克隆下来的文件夹&lt;/span&gt;
cd django-ckeditor/
&lt;span class=&quot;preprocessor&quot;&gt;# 运行下面的命令&lt;/span&gt;
python setup.py install
&lt;/code&gt;&lt;/pre&gt;&lt;h3 id=&quot;安装Pillow&quot;&gt;安装Pillow&lt;/h3&gt;&lt;p&gt;&lt;code style=&quot;color: red&quot;&gt;Pillow&lt;/code&gt;是python的一个图像处理库，django-ckeditor需要依赖该库。最简单的安装方法，当然是使用pip，假设你装过pip，可以直接运行以下命令安装：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;pip &lt;span class=&quot;keyword&quot;&gt;install&lt;/span&gt; Pillow
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;如果你不了解pip，可以参照：&lt;a href=&quot;https://pypi.python.org/pypi/pip&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;https://pypi.python.org/pypi/pip&lt;/a&gt;&lt;/p&gt;
&lt;h3 id=&quot;配置你的django&quot;&gt;配置你的django&lt;/h3&gt;&lt;p&gt;要使安装好的&lt;code style=&quot;color: red&quot;&gt;django-ckeditor&lt;/code&gt;生效，你需要对你的django应用进行一系列配置。现在带大家走一遍，放轻松^_^&lt;/p&gt;
&lt;p&gt;1.在你的&lt;code style=&quot;color: red&quot;&gt;settings.py&lt;/code&gt;文件中，将ckeditor添加到&lt;code style=&quot;color: red&quot;&gt;INATALLED_APPS&lt;/code&gt;中。&lt;/p&gt;
&lt;p&gt;2.在你的&lt;code style=&quot;color: red&quot;&gt;settings.py&lt;/code&gt;文件中，添加&lt;code style=&quot;color: red&quot;&gt;CKEDITOR_UPLOAD_PATH&lt;/code&gt;配置项。&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;例如，我的是
&lt;span class=&quot;constant&quot;&gt;MEDIA_URL&lt;/span&gt; = &lt;span class=&quot;string&quot;&gt;&quot;/media/&quot;&lt;/span&gt;
&lt;span class=&quot;constant&quot;&gt;MEDIA_ROOT&lt;/span&gt; = os.path.join(BASE_DIR, &lt;span class=&quot;string&quot;&gt;&quot;media&quot;&lt;/span&gt;)
&lt;span class=&quot;constant&quot;&gt;CKEDITOR_UPLOAD_PATH&lt;/span&gt; = &lt;span class=&quot;string&quot;&gt;&quot;article_images&quot;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;&lt;code style=&quot;color: red&quot;&gt;CHEDITOR_UPLOAD_PATH&lt;/code&gt;的作用是设定你通过ckeditor所上传的文件的存放目录。需要注意的是，这是一个相对路径，它相对与你设置的的&lt;code style=&quot;color: red&quot;&gt;MEDIA_ROOT&lt;/code&gt;。&lt;code style=&quot;color: red&quot;&gt;django-ckeditor&lt;/code&gt;默认使用django的后台文件存储系统，这需要你设置好&lt;code style=&quot;color: red&quot;&gt;MEDIA_ROOT&lt;/code&gt;和&lt;code style=&quot;color: red&quot;&gt;MEDIA_URL&lt;/code&gt;，如何设置超出了本文的范围，请自行查看django的官方文档，请务必确保这两个设置项是生效的，否则你将看不到你上传的文件。&lt;/p&gt;
&lt;p&gt;比如，我上传一张名为shiguang.gif的小图片，该图片将会被存储到：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;&lt;span class=&quot;regexp&quot;&gt;/my/&lt;/span&gt;django&lt;span class=&quot;regexp&quot;&gt;/app/&lt;/span&gt;root&lt;span class=&quot;regexp&quot;&gt;/media/&lt;/span&gt;article_images&lt;span class=&quot;regexp&quot;&gt;/&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;3.在你django应用的的urls.py文件中，为ckeditor设置url：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;url(&lt;span class=&quot;string&quot;&gt;r&#39;^ckeditor/&#39;&lt;/span&gt;, include(&lt;span class=&quot;string&quot;&gt;&#39;ckeditor_uploader.urls&#39;&lt;/span&gt;)),
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;至此，你的ckeditor已经可以在django中正常使用了。&lt;/p&gt;
&lt;p&gt;需要指出的是：在开发阶段，这样设置settings.py已经足够了。但是，到了正式部署你的应用时，你需要设置好&lt;code style=&quot;color: red&quot;&gt;STATIC_ROOT和STATIC_URL&lt;/code&gt;，并运行&lt;code style=&quot;color: red&quot;&gt;manage.py collectstatic&lt;/code&gt;命令，该命令会将ckeditor相关的静态资源拷贝到你的工程下。&lt;/p&gt;
&lt;h3 id=&quot;如何应用ckeditor&quot;&gt;如何应用ckeditor&lt;/h3&gt;&lt;p&gt;django-ckeditor提供了两个类：&lt;code style=&quot;color: red&quot;&gt;RichTextField&lt;/code&gt;和&lt;code style=&quot;color: red&quot;&gt;CKEditorWidget&lt;/code&gt;，分别用于模型和表单。内容型网站通常在后台会有一个文章发布和编辑的界面，如果你想让该界面拥有一个富文本编辑器，只需按如下方式定义你的django模型：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;from django&lt;span class=&quot;class&quot;&gt;.db&lt;/span&gt; import models
from ckeditor&lt;span class=&quot;class&quot;&gt;.fields&lt;/span&gt; import RichTextField

class &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;title&quot;&gt;Article&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(models.Model)&lt;/span&gt;&lt;/span&gt;:
    &lt;span class=&quot;attribute&quot;&gt;content&lt;/span&gt; = &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;title&quot;&gt;RichTextField&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(&lt;span class=&quot;string&quot;&gt;&#39;正文&#39;&lt;/span&gt;)&lt;/span&gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;如果你在你的后台看到下图这样的界面，那么恭喜你，你初步成功了。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://7xojjc.com1.z0.glb.clouddn.com/qq20140625074502.png&quot; class=&quot;img-shadow&quot; style=&quot;display: block;margin: auto&quot;&gt;&lt;/p&gt;
&lt;p&gt;&lt;code style=&quot;color: red&quot;&gt;RichTextField&lt;/code&gt;是一个&lt;code style=&quot;color: red&quot;&gt;TextField&lt;/code&gt;的子类，除了&lt;code style=&quot;color: red&quot;&gt;TextField&lt;/code&gt;拥有所有参数外，还有自己的参数，这些参数中，软件作者的文档中只介绍了&lt;code style=&quot;color: red&quot;&gt;config_name&lt;/code&gt;这个参数，其它的没有提及，虽然比较操蛋，但我们还是对作者贡献这个开源项目表示由衷的感谢。&lt;/p&gt;
&lt;p&gt;通过查看源代码，可以发现&lt;code style=&quot;color: red&quot;&gt;RichTextField&lt;/code&gt;有&lt;code style=&quot;color: red&quot;&gt;config_name&lt;/code&gt;、&lt;code style=&quot;color: red&quot;&gt;extra_plugins&lt;/code&gt;、&lt;code style=&quot;color: red&quot;&gt;external_plugin_resources&lt;/code&gt;三个额外的可选参数。&lt;code style=&quot;color: red&quot;&gt;extra_plugins&lt;/code&gt;我将撰写专文，尽请期待。&lt;/p&gt;
&lt;h3 id=&quot;进一步完善&quot;&gt;进一步完善&lt;/h3&gt;&lt;p&gt;追求完美的你，此刻一定有诸多不满。ckeditor最重要的，当然是头部的工具栏了，但现在你看到的工具栏比较简陋。比如，你想调整文本的对其方式，你发现找不到对应的按钮。别急，往下看。&lt;/p&gt;
&lt;p&gt;django-ckeditor作者的文档中，提到了一个配置项：&lt;code style=&quot;color: red&quot;&gt;CKEDITOR_CONFIGS&lt;/code&gt;。从作者的文档看来，似乎只要在settings.py中按如下方式配置，就可以拥有一个完整的、丰富工具栏：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;CKEDITOR_CONFIGS = {
    &lt;span class=&quot;string&quot;&gt;&#39;default&#39;&lt;/span&gt;: {
        &lt;span class=&quot;string&quot;&gt;&#39;toolbar&#39;&lt;/span&gt;: &lt;span class=&quot;string&quot;&gt;&#39;Full&#39;&lt;/span&gt;,
        &lt;span class=&quot;string&quot;&gt;&#39;height&#39;&lt;/span&gt;: &lt;span class=&quot;number&quot;&gt;300&lt;/span&gt;,
        &lt;span class=&quot;string&quot;&gt;&#39;width&#39;&lt;/span&gt;: &lt;span class=&quot;number&quot;&gt;300&lt;/span&gt;,
    },
}
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;你失望地发现，宽度和高度确实起作用了，可工具栏的功能还是没多页没少：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://7xojjc.com1.z0.glb.clouddn.com/qq20140625080916.png&quot; class=&quot;img-shadow&quot; style=&quot;display: block;margin: auto&quot;&gt;&lt;/p&gt;
&lt;p&gt;怎么回事呢？如果你进行如下设置，你会发现工具栏里的按钮变少了：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;CKEDITOR_CONFIGS = {
    &lt;span class=&quot;string&quot;&gt;&#39;default&#39;&lt;/span&gt;: {
        &lt;span class=&quot;string&quot;&gt;&#39;toolbar&#39;&lt;/span&gt;: &lt;span class=&quot;string&quot;&gt;&#39;Basic&#39;&lt;/span&gt;
    },
}
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;&lt;img src=&quot;http://7xojjc.com1.z0.glb.clouddn.com/qq20140625081523.png&quot; class=&quot;img-shadow&quot; style=&quot;display: block;margin: auto&quot;&gt;&lt;/p&gt;
&lt;p&gt;看来配置项“toolbar”这个参数是生效的，那问题出在哪了？别抓狂，不是说简洁就是美吗，呵呵。不过话虽如此，咱么还是去看看源码一探究竟吧。&lt;/p&gt;
&lt;p&gt;打开如下源文件：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;your&lt;span class=&quot;command&quot;&gt;\python&lt;/span&gt;&lt;span class=&quot;command&quot;&gt;\path&lt;/span&gt;&lt;span class=&quot;command&quot;&gt;\Lib&lt;/span&gt;&lt;span class=&quot;command&quot;&gt;\site&lt;/span&gt;-packages&lt;span class=&quot;command&quot;&gt;\django&lt;/span&gt;_ckeditor_updated-4.2.8-py2.7.egg&lt;span class=&quot;command&quot;&gt;\ckeditor&lt;/span&gt;&lt;span class=&quot;command&quot;&gt;\widgets&lt;/span&gt;.py
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;可以发现如下代码：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;&lt;span class=&quot;name&quot;&gt;DEFAULT_CONFIG&lt;/span&gt; = {
    &lt;span class=&quot;string&quot;&gt;&#39;skin&#39;&lt;/span&gt;: &lt;span class=&quot;string&quot;&gt;&#39;moono&#39;&lt;/span&gt;,
    &lt;span class=&quot;string&quot;&gt;&#39;toolbar_Basic&#39;&lt;/span&gt;: [
        [&lt;span class=&quot;string&quot;&gt;&#39;Source&#39;&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&#39;-&#39;&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&#39;Bold&#39;&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&#39;Italic&#39;&lt;/span&gt;]
    ],
    &lt;span class=&quot;string&quot;&gt;&#39;toolbar_Full&#39;&lt;/span&gt;: [
        [&lt;span class=&quot;string&quot;&gt;&#39;Styles&#39;&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&#39;Format&#39;&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&#39;Bold&#39;&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&#39;Italic&#39;&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&#39;Underline&#39;&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&#39;Strike&#39;&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&#39;SpellChecker&#39;&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&#39;Undo&#39;&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&#39;Redo&#39;&lt;/span&gt;],
        [&lt;span class=&quot;string&quot;&gt;&#39;Image&#39;&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&#39;Flash&#39;&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&#39;Table&#39;&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&#39;HorizontalRule&#39;&lt;/span&gt;],
        [&lt;span class=&quot;string&quot;&gt;&#39;TextColor&#39;&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&#39;BGColor&#39;&lt;/span&gt;],
        [&lt;span class=&quot;string&quot;&gt;&#39;Smiley&#39;&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&#39;SpecialChar&#39;&lt;/span&gt;], [&lt;span class=&quot;string&quot;&gt;&#39;Source&#39;&lt;/span&gt;],
    ],
    &lt;span class=&quot;string&quot;&gt;&#39;toolbar&#39;&lt;/span&gt;: &lt;span class=&quot;string&quot;&gt;&#39;Full&#39;&lt;/span&gt;,
    &lt;span class=&quot;string&quot;&gt;&#39;height&#39;&lt;/span&gt;: &lt;span class=&quot;number&quot;&gt;291&lt;/span&gt;,
    &lt;span class=&quot;string&quot;&gt;&#39;width&#39;&lt;/span&gt;: &lt;span class=&quot;number&quot;&gt;835&lt;/span&gt;,
    &lt;span class=&quot;string&quot;&gt;&#39;filebrowserWindowWidth&#39;&lt;/span&gt;: &lt;span class=&quot;number&quot;&gt;940&lt;/span&gt;,
    &lt;span class=&quot;string&quot;&gt;&#39;filebrowserWindowHeight&#39;&lt;/span&gt;: &lt;span class=&quot;number&quot;&gt;725&lt;/span&gt;    
}
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;没错，问题就处在这里了。可以看到，默认的设置的确就是’toolbar’: ‘Full’,但是通过’toolbar_Full’这个key，作者阉割了工具栏的功能。&lt;/p&gt;
&lt;p&gt;找到的原因就好办了，接下来你只要在settings.py配置文件中，在&lt;code style=&quot;color: red&quot;&gt;CKEDITOR_CONFIGS&lt;/code&gt;中加入你自己需要的工具栏按钮即可：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;&lt;span class=&quot;name&quot;&gt;CKEDITOR_CONFIGS&lt;/span&gt; = {
    &lt;span class=&quot;string&quot;&gt;&#39;default&#39;&lt;/span&gt;: {
        &lt;span class=&quot;string&quot;&gt;&#39;toolbar&#39;&lt;/span&gt;: (
            [&lt;span class=&quot;string&quot;&gt;&#39;div&#39;&lt;/span&gt;,&lt;span class=&quot;string&quot;&gt;&#39;Source&#39;&lt;/span&gt;,&lt;span class=&quot;string&quot;&gt;&#39;-&#39;&lt;/span&gt;,&lt;span class=&quot;string&quot;&gt;&#39;Save&#39;&lt;/span&gt;,&lt;span class=&quot;string&quot;&gt;&#39;NewPage&#39;&lt;/span&gt;,&lt;span class=&quot;string&quot;&gt;&#39;Preview&#39;&lt;/span&gt;,&lt;span class=&quot;string&quot;&gt;&#39;-&#39;&lt;/span&gt;,&lt;span class=&quot;string&quot;&gt;&#39;Templates&#39;&lt;/span&gt;], 
            [&lt;span class=&quot;string&quot;&gt;&#39;Cut&#39;&lt;/span&gt;,&lt;span class=&quot;string&quot;&gt;&#39;Copy&#39;&lt;/span&gt;,&lt;span class=&quot;string&quot;&gt;&#39;Paste&#39;&lt;/span&gt;,&lt;span class=&quot;string&quot;&gt;&#39;PasteText&#39;&lt;/span&gt;,&lt;span class=&quot;string&quot;&gt;&#39;PasteFromWord&#39;&lt;/span&gt;,&lt;span class=&quot;string&quot;&gt;&#39;-&#39;&lt;/span&gt;,&lt;span class=&quot;string&quot;&gt;&#39;Print&#39;&lt;/span&gt;,&lt;span class=&quot;string&quot;&gt;&#39;SpellChecker&#39;&lt;/span&gt;,&lt;span class=&quot;string&quot;&gt;&#39;Scayt&#39;&lt;/span&gt;], 
            [&lt;span class=&quot;string&quot;&gt;&#39;Undo&#39;&lt;/span&gt;,&lt;span class=&quot;string&quot;&gt;&#39;Redo&#39;&lt;/span&gt;,&lt;span class=&quot;string&quot;&gt;&#39;-&#39;&lt;/span&gt;,&lt;span class=&quot;string&quot;&gt;&#39;Find&#39;&lt;/span&gt;,&lt;span class=&quot;string&quot;&gt;&#39;Replace&#39;&lt;/span&gt;,&lt;span class=&quot;string&quot;&gt;&#39;-&#39;&lt;/span&gt;,&lt;span class=&quot;string&quot;&gt;&#39;SelectAll&#39;&lt;/span&gt;,&lt;span class=&quot;string&quot;&gt;&#39;RemoveFormat&#39;&lt;/span&gt;], 
            [&lt;span class=&quot;string&quot;&gt;&#39;Form&#39;&lt;/span&gt;,&lt;span class=&quot;string&quot;&gt;&#39;Checkbox&#39;&lt;/span&gt;,&lt;span class=&quot;string&quot;&gt;&#39;Radio&#39;&lt;/span&gt;,&lt;span class=&quot;string&quot;&gt;&#39;TextField&#39;&lt;/span&gt;,&lt;span class=&quot;string&quot;&gt;&#39;Textarea&#39;&lt;/span&gt;,&lt;span class=&quot;string&quot;&gt;&#39;Select&#39;&lt;/span&gt;,&lt;span class=&quot;string&quot;&gt;&#39;Button&#39;&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&#39;ImageButton&#39;&lt;/span&gt;,&lt;span class=&quot;string&quot;&gt;&#39;HiddenField&#39;&lt;/span&gt;], 
            [&lt;span class=&quot;string&quot;&gt;&#39;Bold&#39;&lt;/span&gt;,&lt;span class=&quot;string&quot;&gt;&#39;Italic&#39;&lt;/span&gt;,&lt;span class=&quot;string&quot;&gt;&#39;Underline&#39;&lt;/span&gt;,&lt;span class=&quot;string&quot;&gt;&#39;Strike&#39;&lt;/span&gt;,&lt;span class=&quot;string&quot;&gt;&#39;-&#39;&lt;/span&gt;,&lt;span class=&quot;string&quot;&gt;&#39;Subscript&#39;&lt;/span&gt;,&lt;span class=&quot;string&quot;&gt;&#39;Superscript&#39;&lt;/span&gt;], 
            [&lt;span class=&quot;string&quot;&gt;&#39;NumberedList&#39;&lt;/span&gt;,&lt;span class=&quot;string&quot;&gt;&#39;BulletedList&#39;&lt;/span&gt;,&lt;span class=&quot;string&quot;&gt;&#39;-&#39;&lt;/span&gt;,&lt;span class=&quot;string&quot;&gt;&#39;Outdent&#39;&lt;/span&gt;,&lt;span class=&quot;string&quot;&gt;&#39;Indent&#39;&lt;/span&gt;,&lt;span class=&quot;string&quot;&gt;&#39;Blockquote&#39;&lt;/span&gt;], 
            [&lt;span class=&quot;string&quot;&gt;&#39;JustifyLeft&#39;&lt;/span&gt;,&lt;span class=&quot;string&quot;&gt;&#39;JustifyCenter&#39;&lt;/span&gt;,&lt;span class=&quot;string&quot;&gt;&#39;JustifyRight&#39;&lt;/span&gt;,&lt;span class=&quot;string&quot;&gt;&#39;JustifyBlock&#39;&lt;/span&gt;], 
            [&lt;span class=&quot;string&quot;&gt;&#39;Link&#39;&lt;/span&gt;,&lt;span class=&quot;string&quot;&gt;&#39;Unlink&#39;&lt;/span&gt;,&lt;span class=&quot;string&quot;&gt;&#39;Anchor&#39;&lt;/span&gt;], 
            [&lt;span class=&quot;string&quot;&gt;&#39;Image&#39;&lt;/span&gt;,&lt;span class=&quot;string&quot;&gt;&#39;Flash&#39;&lt;/span&gt;,&lt;span class=&quot;string&quot;&gt;&#39;Table&#39;&lt;/span&gt;,&lt;span class=&quot;string&quot;&gt;&#39;HorizontalRule&#39;&lt;/span&gt;,&lt;span class=&quot;string&quot;&gt;&#39;Smiley&#39;&lt;/span&gt;,&lt;span class=&quot;string&quot;&gt;&#39;SpecialChar&#39;&lt;/span&gt;,&lt;span class=&quot;string&quot;&gt;&#39;PageBreak&#39;&lt;/span&gt;], 
            [&lt;span class=&quot;string&quot;&gt;&#39;Styles&#39;&lt;/span&gt;,&lt;span class=&quot;string&quot;&gt;&#39;Format&#39;&lt;/span&gt;,&lt;span class=&quot;string&quot;&gt;&#39;Font&#39;&lt;/span&gt;,&lt;span class=&quot;string&quot;&gt;&#39;FontSize&#39;&lt;/span&gt;], 
            [&lt;span class=&quot;string&quot;&gt;&#39;TextColor&#39;&lt;/span&gt;,&lt;span class=&quot;string&quot;&gt;&#39;BGColor&#39;&lt;/span&gt;], 
            [&lt;span class=&quot;string&quot;&gt;&#39;Maximize&#39;&lt;/span&gt;,&lt;span class=&quot;string&quot;&gt;&#39;ShowBlocks&#39;&lt;/span&gt;,&lt;span class=&quot;string&quot;&gt;&#39;-&#39;&lt;/span&gt;,&lt;span class=&quot;string&quot;&gt;&#39;About&#39;&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&#39;pbckcode&#39;&lt;/span&gt;],
        ),
    }
}
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;当然，你可以注掉你不需要的功能，是丰是俭，全凭你做主！&lt;/p&gt;
&lt;p&gt;重启应用后，你可以看到：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://7xojjc.com1.z0.glb.clouddn.com/qq20140625083707.png&quot; class=&quot;img-shadow&quot; style=&quot;display: block;margin: auto&quot;&gt;&lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;http://7xojjc.com1.z0.glb.clouddn.com/319037-106.jpg&quot; class=&quot;img-shadow&quot; style=&quot;display: block;margin: auto&quot;&gt;&lt;/p&gt;
&lt;p&gt;当你想入门djang
    
    </summary>
    
      <category term="python" scheme="http://python-ning.github.io/categories/python/"/>
    
    
      <category term="django" scheme="http://python-ning.github.io/tags/django/"/>
    
  </entry>
  
  <entry>
    <title>Django(六)用django自带Paginator实现分页功能</title>
    <link href="http://python-ning.github.io/2016/04/08/python_django_paginator/"/>
    <id>http://python-ning.github.io/2016/04/08/python_django_paginator/</id>
    <published>2016-04-08T07:00:00.000Z</published>
    <updated>2016-04-12T17:54:54.000Z</updated>
    
    <content type="html">&lt;p&gt;&lt;img src=&quot;http://7xojjc.com1.z0.glb.clouddn.com/314935-106.jpg&quot; class=&quot;img-shadow&quot; style=&quot;display: block;margin: auto&quot;&gt;&lt;/p&gt;
&lt;p&gt;在django中使用Paginator可以很方便的实现分页功能，下面就通过一个具体的例子来讲讲如何使用Paginator。&lt;/p&gt;
&lt;h3 id=&quot;在view-py中使用Paginator&quot;&gt;在view.py中使用Paginator&lt;/h3&gt;&lt;pre&gt;&lt;code&gt;&lt;span class=&quot;keyword&quot;&gt;from&lt;/span&gt; django.core.paginator &lt;span class=&quot;keyword&quot;&gt;import&lt;/span&gt; Paginator, EmptyPage, PageNotAnInteger
&lt;span class=&quot;keyword&quot;&gt;from&lt;/span&gt; app.models &lt;span class=&quot;keyword&quot;&gt;import&lt;/span&gt; Topic

&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;index&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(request)&lt;/span&gt;:&lt;/span&gt;
limit = &lt;span class=&quot;number&quot;&gt;3&lt;/span&gt;  &lt;span class=&quot;comment&quot;&gt;# 每页显示的记录数&lt;/span&gt;
topics = Topic.objects.all()
paginator = Paginator(topics, limit)  &lt;span class=&quot;comment&quot;&gt;# 实例化一个分页对象&lt;/span&gt;

page = request.GET.get(&lt;span class=&quot;string&quot;&gt;&#39;page&#39;&lt;/span&gt;)  &lt;span class=&quot;comment&quot;&gt;# 获取页码&lt;/span&gt;
&lt;span class=&quot;keyword&quot;&gt;try&lt;/span&gt;:
    topics = paginator.page(page)  &lt;span class=&quot;comment&quot;&gt;# 获取某页对应的记录&lt;/span&gt;
&lt;span class=&quot;keyword&quot;&gt;except&lt;/span&gt; PageNotAnInteger:  &lt;span class=&quot;comment&quot;&gt;# 如果页码不是个整数&lt;/span&gt;
    topics = paginator.page(&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;)  &lt;span class=&quot;comment&quot;&gt;# 取第一页的记录&lt;/span&gt;
    &lt;span class=&quot;keyword&quot;&gt;except&lt;/span&gt; EmptyPage:  &lt;span class=&quot;comment&quot;&gt;# 如果页码太大，没有相应的记录&lt;/span&gt;
        topics = paginator.page(paginator.num_pages)  &lt;span class=&quot;comment&quot;&gt;# 取最后一页的记录&lt;/span&gt;

    &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; render_to_response(&lt;span class=&quot;string&quot;&gt;&#39;index.html&#39;&lt;/span&gt;, {&lt;span class=&quot;string&quot;&gt;&#39;topics&#39;&lt;/span&gt;: topics})
&lt;/code&gt;&lt;/pre&gt;&lt;h3 id=&quot;模板中的相关操作&quot;&gt;模板中的相关操作&lt;/h3&gt;&lt;p&gt;&lt;img src=&quot;http://7xojjc.com1.z0.glb.clouddn.com/fenye.jpg&quot; class=&quot;img-shadow&quot; style=&quot;display: block;margin: auto&quot;&gt;&lt;/p&gt;
&lt;h3 id=&quot;效果：&quot;&gt;效果：&lt;/h3&gt;&lt;p&gt;&lt;img src=&quot;http://7xojjc.com1.z0.glb.clouddn.com/2013-1-26-django-pagination.png&quot; class=&quot;img-shadow&quot; style=&quot;display: block;margin: auto&quot;&gt;&lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;http://7xojjc.com1.z0.glb.clouddn.com/314935-106.jpg&quot; class=&quot;img-shadow&quot; style=&quot;display: block;margin: auto&quot;&gt;&lt;/p&gt;
&lt;p&gt;在django中使用
    
    </summary>
    
      <category term="python" scheme="http://python-ning.github.io/categories/python/"/>
    
    
      <category term="django" scheme="http://python-ning.github.io/tags/django/"/>
    
  </entry>
  
  <entry>
    <title>初识NoSQL</title>
    <link href="http://python-ning.github.io/2016/04/08/good_article_collect_nosql/"/>
    <id>http://python-ning.github.io/2016/04/08/good_article_collect_nosql/</id>
    <published>2016-04-08T07:00:00.000Z</published>
    <updated>2016-04-09T00:29:04.000Z</updated>
    
    <content type="html">&lt;p&gt;&lt;img src=&quot;http://7xojjc.com1.z0.glb.clouddn.com/318044-106.jpg&quot; class=&quot;img-shadow&quot; style=&quot;display: block;margin: auto&quot;&gt;&lt;/p&gt;
&lt;p&gt;标签：&lt;/p&gt;
&lt;p&gt;NoSQL(NoSQL = Not Only SQL )，意即”不仅仅是SQL”。&lt;/p&gt;
&lt;p&gt;在现代的计算系统上每天网络上都会产生庞大的数据量。&lt;/p&gt;
&lt;p&gt;这些数据有很大一部分是由关系数据库管理系统（RDMBSs）来处理。 1970年 E.F.Codd’s提出的关系模型的论文 “A relational model of data for large shared data banks”，这使得数据建模和应用程序编程更加简单。&lt;br&gt;通过应用实践证明，关系模型是非常适合于客户服务器编程，远远超出预期的利益，今天它是结构化数据存储在网络和商务应用的主导技术。&lt;/p&gt;
&lt;h3 id=&quot;NoSQL_简史&quot;&gt;NoSQL 简史&lt;/h3&gt;&lt;p&gt;NoSQL一词最早出现于1998年，是Carlo Strozzi开发的一个轻量、开源、不提供SQL功能的关系数据库。&lt;/p&gt;
&lt;p&gt;2009年，Last.fm的Johan Oskarsson发起了一次关于分布式开源数据库的讨论[2]，来自Rackspace的Eric Evans再次提出了NoSQL的概念，这时的NoSQL主要指非关系型、分布式、不提供ACID的数据库设计模式。&lt;/p&gt;
&lt;p&gt;2009年在亚特兰大举行的”no:sql(east)”讨论会是一个里程碑，其口号是”select fun, profit from real_world where relational=false;”。因此，对NoSQL最普遍的解释是”非关联型的”，强调Key-Value Stores和文档数据库的优点，而不是单纯的反对RDBMS。&lt;/p&gt;
&lt;p&gt;NoSQL 是一项全新的数据库革命性运动，早期就有人提出，发展至2009年趋势越发高涨。NoSQL的拥护者们提倡运用非关系型的数据存储，相对于铺天盖地的关系型数据库运用，这一概念无疑是一种全新的思维的注入。&lt;/p&gt;
&lt;h3 id=&quot;关系型数据库遵循ACID规则&quot;&gt;关系型数据库遵循ACID规则&lt;/h3&gt;&lt;p&gt;事务在英文中是transaction，和现实世界中的交易很类似，它有如下四个特性：&lt;/p&gt;
&lt;h2 id=&quot;1、A_(Atomicity)_原子性&quot;&gt;1、A (Atomicity) 原子性&lt;/h2&gt;&lt;p&gt;原子性很容易理解，也就是说事务里的所有操作要么全部做完，要么都不做，事务成功的条件是事务里的所有操作都成功，只要有一个操作失败，整个事务就失败，需要回滚。&lt;br&gt;比如银行转账，从A账户转100元至B账户，分为两个步骤：1）从A账户取100元；2）存入100元至B账户。这两步要么一起完成，要么一起不完成，如果只完成第一步，第二步失败，钱会莫名其妙少了100元。&lt;/p&gt;
&lt;h2 id=&quot;2、C_(Consistency)_一致性&quot;&gt;2、C (Consistency) 一致性&lt;/h2&gt;&lt;p&gt;一致性也比较容易理解，也就是说数据库要一直处于一致的状态，事务的运行不会改变数据库原本的一致性约束。&lt;br&gt;例如现有完整性约束a+b=10，如果一个事务改变了a，那么必须得改变b，使得事务结束后依然满足a+b=10，否则事务失败。&lt;/p&gt;
&lt;h2 id=&quot;3、I_(Isolation)_独立性&quot;&gt;3、I (Isolation) 独立性&lt;/h2&gt;&lt;p&gt;所谓的独立性是指并发的事务之间不会互相影响，如果一个事务要访问的数据正在被另外一个事务修改，只要另外一个事务未提交，它所访问的数据就不受未提交事务的影响。&lt;br&gt;比如现有有个交易是从A账户转100元至B账户，在这个交易还未完成的情况下，如果此时B查询自己的账户，是看不到新增加的100元的。&lt;/p&gt;
&lt;h2 id=&quot;4、D_(Durability)_持久性&quot;&gt;4、D (Durability) 持久性&lt;/h2&gt;&lt;p&gt;持久性是指一旦事务提交后，它所做的修改将会永久的保存在数据库上，即使出现宕机也不会丢失。&lt;/p&gt;
&lt;h3 id=&quot;分布式系统&quot;&gt;分布式系统&lt;/h3&gt;&lt;p&gt;分布式系统（distributed system）由多台计算机和通信的软件组件通过计算机网络连接（本地网络或广域网）组成。&lt;br&gt;分布式系统是建立在网络之上的软件系统。正是因为软件的特性，所以分布式系统具有高度的内聚性和透明性。&lt;br&gt;因此，网络和分布式系统之间的区别更多的在于高层软件（特别是操作系统），而不是硬件。&lt;br&gt;分布式系统可以应用在在不同的平台上如：Pc、工作站、局域网和广域网上等。&lt;/p&gt;
&lt;h2 id=&quot;分布式计算的优点&quot;&gt;分布式计算的优点&lt;/h2&gt;&lt;p&gt;可靠性（容错） ：&lt;br&gt;分布式计算系统中的一个重要的优点是可靠性。一台服务器的系统崩溃并不影响到其余的服务器。&lt;br&gt;可扩展性：&lt;br&gt;在分布式计算系统可以根据需要增加更多的机器。&lt;br&gt;资源共享：&lt;br&gt;共享数据是必不可少的应用，如银行，预订系统。&lt;br&gt;灵活性：&lt;br&gt;由于该系统是非常灵活的，它很容易安装，实施和调试新的服务。&lt;br&gt;更快的速度：&lt;br&gt;分布式计算系统可以有多台计算机的计算能力，使得它比其他系统有更快的处理速度。&lt;br&gt;开放系统：&lt;br&gt;由于它是开放的系统，本地或者远程都可以访问到该服务。&lt;br&gt;更高的性能：&lt;br&gt;相较于集中式计算机网络集群可以提供更高的性能（及更好的性价比）。&lt;/p&gt;
&lt;h2 id=&quot;分布式计算的缺点&quot;&gt;分布式计算的缺点&lt;/h2&gt;&lt;p&gt;故障排除： ：&lt;br&gt;故障排除和诊断问题。&lt;br&gt;软件：&lt;br&gt;更少的软件支持是分布式计算系统的主要缺点。&lt;br&gt;网络：&lt;br&gt;网络基础设施的问题，包括：传输问题，高负载，信息丢失等。&lt;br&gt;安全性：&lt;br&gt;开发系统的特性让分布式计算系统存在着数据的安全性和共享的风险等问题。&lt;/p&gt;
&lt;h3 id=&quot;什么是NoSQL?&quot;&gt;什么是NoSQL?&lt;/h3&gt;&lt;p&gt;NoSQL，指的是非关系型的数据库。NoSQL有时也称作Not Only SQL的缩写，是对不同于传统的关系型数据库的数据库管理系统的统称。&lt;br&gt;NoSQL用于超大规模数据的存储。（例如谷歌或Facebook每天为他们的用户收集万亿比特的数据）。这些类型的数据存储不需要固定的模式，无需多余操作就可以横向扩展。&lt;/p&gt;
&lt;h2 id=&quot;为什么使用NoSQL_?&quot;&gt;为什么使用NoSQL ?&lt;/h2&gt;&lt;p&gt;今天我们可以通过第三方平台（如：Google,Facebook等）可以很容易的访问和抓取数据。用户的个人信息，社交网络，地理位置，用户生成的数据和用户操作日志已经成倍的增加。我们如果要对这些用户数据进行挖掘，那SQL数据库已经不适合这些应用了, NoSQL数据库的发展也却能很好的处理这些大的数据。&lt;/p&gt;
&lt;h3 id=&quot;RDBMS_vs_NoSQL&quot;&gt;RDBMS vs NoSQL&lt;/h3&gt;&lt;h2 id=&quot;RDBMS&quot;&gt;RDBMS&lt;/h2&gt;&lt;pre&gt;&lt;code&gt;高度组织化结构化数据
结构化查询语言（SQL） &lt;span class=&quot;comment&quot;&gt;(SQL)&lt;/span&gt;
数据和关系都存储在单独的表中。
数据操纵语言，数据定义语言
严格的一致性
基础事务
&lt;/code&gt;&lt;/pre&gt;&lt;h2 id=&quot;NoSQL&quot;&gt;NoSQL&lt;/h2&gt;&lt;pre&gt;&lt;code&gt;代表着不仅仅是SQL
没有声明性查询语言
没有预定义的模式
-&lt;span class=&quot;ruby&quot;&gt;键 - 值对存储，列存储，文档存储，图形数据库
&lt;/span&gt;最终一致性，而非ACID属性
非结构化和不可预知的数据
CAP定理
高性能，高可用性和可伸缩性
&lt;/code&gt;&lt;/pre&gt;&lt;h2 id=&quot;CAP定理（CAP_theorem）&quot;&gt;CAP定理（CAP theorem）&lt;/h2&gt;&lt;p&gt;在计算机科学中, CAP定理（CAP theorem）, 又被称作 布鲁尔定理（Brewer’s theorem）, 它指出对于一个分布式计算系统来说，不可能同时满足以下三点:&lt;br&gt;1.一致性(Consistency) (所有节点在同一时间具有相同的数据)&lt;br&gt;2.可用性(Availability) (保证每个请求不管成功或者失败都有响应)&lt;br&gt;3.分隔容忍(Partition tolerance) (系统中任意信息的丢失或失败不会影响系统的继续运作)&lt;br&gt;CAP理论的核心：一个分布式系统不可能同时很好的满足一致性，可用性和分区容错性这三个需求，最多只能同时较好的满足两个。&lt;/p&gt;
&lt;p&gt;因此，根据 CAP 原理将 NoSQL 数据库分成了满足 CA 原则、满足 CP 原则和满足 AP 原则三 大类：&lt;br&gt;CA - 单点集群，满足一致性，可用性的系统，通常在可扩展性上不太强大。&lt;br&gt;CP - 满足一致性，分区容忍必的系统，通常性能不是特别高。&lt;br&gt;AP - 满足可用性，分区容忍性的系统，通常可能对一致性要求低一些。 &lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://7xojjc.com1.z0.glb.clouddn.com/20160408111941080.png&quot; class=&quot;img-shadow&quot; style=&quot;display: block;margin: auto&quot;&gt;&lt;/p&gt;
&lt;h3 id=&quot;NoSQL的优点/缺点&quot;&gt;NoSQL的优点/缺点&lt;/h3&gt;&lt;h2 id=&quot;优点:&quot;&gt;优点:&lt;/h2&gt;&lt;pre&gt;&lt;code&gt;高可扩展性
分布式计算
低成本
架构的灵活性，半结构化数据
没有复杂的关系
&lt;/code&gt;&lt;/pre&gt;&lt;h2 id=&quot;缺点:&quot;&gt;缺点:&lt;/h2&gt;&lt;pre&gt;&lt;code&gt;没有标准化
有限的查询功能（到目前为止）
最终一致是不直观的程序
&lt;/code&gt;&lt;/pre&gt;&lt;h3 id=&quot;BASE&quot;&gt;BASE&lt;/h3&gt;&lt;p&gt;BASE：Basically Available, Soft-state, Eventually Consistent。 由 Eric Brewer 定义。&lt;br&gt;CAP理论的核心是：一个分布式系统不可能同时很好的满足一致性，可用性和分区容错性这三个需求，最多只能同时较好的满足两个。&lt;br&gt;BASE是NoSQL数据库通常对可用性及一致性的弱要求原则:&lt;br&gt;1.Basically Availble –基本可用&lt;br&gt;2.Soft-state –软状态/柔性事务。 “Soft state” 可以理解为”无连接”的, 而 “Hard state” 是”面向连接”的&lt;br&gt;3.Eventual Consistency –最终一致性 最终一致性， 也是是 ACID 的最终目的。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://7xojjc.com1.z0.glb.clouddn.com/20160408111956018.png&quot; class=&quot;img-shadow&quot; style=&quot;display: block;margin: auto&quot;&gt;&lt;br&gt;&lt;img src=&quot;http://7xojjc.com1.z0.glb.clouddn.com/20160408112008565.png&quot; class=&quot;img-shadow&quot; style=&quot;display: block;margin: auto&quot;&gt;&lt;/p&gt;
&lt;h3 id=&quot;谁在使用NoSQL&quot;&gt;谁在使用NoSQL&lt;/h3&gt;&lt;p&gt;现在已经有很多公司使用了 NoSQL：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;Google
Facebook
Mozilla
Adobe
Foursquare
LinkedIn
Digg
McGraw-Hill Education
Vermont &lt;span class=&quot;keyword&quot;&gt;Public&lt;/span&gt; Radio
&lt;/code&gt;&lt;/pre&gt;</content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;http://7xojjc.com1.z0.glb.clouddn.com/318044-106.jpg&quot; class=&quot;img-shadow&quot; style=&quot;display: block;margin: auto&quot;&gt;&lt;/p&gt;
&lt;p&gt;标签：&lt;/p&gt;
&lt;p
    
    </summary>
    
      <category term="好文章收集" scheme="http://python-ning.github.io/categories/%E5%A5%BD%E6%96%87%E7%AB%A0%E6%94%B6%E9%9B%86/"/>
    
    
      <category term="NoSQL" scheme="http://python-ning.github.io/tags/NoSQL/"/>
    
  </entry>
  
  <entry>
    <title>python 文件操作</title>
    <link href="http://python-ning.github.io/2016/02/02/python_IO/"/>
    <id>http://python-ning.github.io/2016/02/02/python_IO/</id>
    <published>2016-02-02T08:00:00.000Z</published>
    <updated>2016-02-03T23:59:48.000Z</updated>
    
    <content type="html">&lt;h3 id=&quot;正常打开文件读取&quot;&gt;正常打开文件读取&lt;/h3&gt;&lt;p&gt;f = open(‘/root/Desktop/test/chen.txt’,’rt’)&lt;/p&gt;
&lt;p&gt;open()内建函数，第一个参数是文件绝对路径，第二个是对文件操作的权限&lt;/p&gt;
&lt;p&gt;r&lt;br&gt;以读方式打开文件，可读取文件信息。&lt;/p&gt;
&lt;p&gt;w&lt;br&gt;以写方式打开文件，可向文件写入信息。如文件存在，则清空该文件，再写入新内容&lt;/p&gt;
&lt;p&gt;a&lt;br&gt;以追加模式打开文件（即一打开文件，文件指针自动移到文件末尾），如果文件不存在则创建&lt;/p&gt;
&lt;p&gt;r+&lt;br&gt;以读写方式打开文件，可对文件进行读和写操作。&lt;/p&gt;
&lt;p&gt;w+&lt;br&gt;消除文件内容，然后以读写方式打开文件。&lt;/p&gt;
&lt;p&gt;a+&lt;br&gt;以读写方式打开文件，并把文件指针移到文件尾。&lt;/p&gt;
&lt;p&gt;b&lt;br&gt;以二进制模式打开文件，而不是以文本模式。该模式只对Windows或Dos有效，类Unix的文件是用二进制模式进行操作的。&lt;/p&gt;
&lt;h3 id=&quot;with&quot;&gt;with&lt;/h3&gt;&lt;pre&gt;&lt;code&gt;with &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;title&quot;&gt;open&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(&lt;span class=&quot;string&quot;&gt;&#39;somefile.txt&#39;&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&#39;rt&#39;&lt;/span&gt;)&lt;/span&gt;&lt;/span&gt; as f:
    data = f.&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;title&quot;&gt;read&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;()&lt;/span&gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;为了写入一个文本文件，使用带有 wt 模式的 open() 函数， 如果之前文件内容存在则清除并覆盖掉。如下所示:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;&lt;span class=&quot;comment&quot;&gt;# Write chunks of text data&lt;/span&gt;
&lt;span class=&quot;operator&quot;&gt;with&lt;/span&gt; &lt;span class=&quot;built_in&quot;&gt;open&lt;/span&gt;(&lt;span class=&quot;string&quot;&gt;&#39;somefile.txt&#39;&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&#39;wt&#39;&lt;/span&gt;) &lt;span class=&quot;keyword&quot;&gt;as&lt;/span&gt; f:
    f.&lt;span class=&quot;built_in&quot;&gt;write&lt;/span&gt;(text1)
    f.&lt;span class=&quot;built_in&quot;&gt;write&lt;/span&gt;(text2)
    ...

&lt;span class=&quot;comment&quot;&gt;# Redirected print statement&lt;/span&gt;
&lt;span class=&quot;operator&quot;&gt;with&lt;/span&gt; &lt;span class=&quot;built_in&quot;&gt;open&lt;/span&gt;(&lt;span class=&quot;string&quot;&gt;&#39;somefile.txt&#39;&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&#39;wt&#39;&lt;/span&gt;) &lt;span class=&quot;keyword&quot;&gt;as&lt;/span&gt; f:
    print(line1, &lt;span class=&quot;built_in&quot;&gt;file&lt;/span&gt;=f)
    print(line2, &lt;span class=&quot;built_in&quot;&gt;file&lt;/span&gt;=f)
    ...
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;如果是在已存在文件中添加内容，使用模式为 at 的 open() 函数&lt;/p&gt;
&lt;p&gt;文件的读写操作默认使用系统编码，可以通过调用 sys.getdefaultencoding() 来得到。 在大多数机器上面都是utf-8编码。如果你已经知道你要读写的文本是其他编码方式， 那么可以通过传递一个可选的 encoding 参数给open()函数。如下所示：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;&lt;span class=&quot;operator&quot;&gt;with&lt;/span&gt; &lt;span class=&quot;built_in&quot;&gt;open&lt;/span&gt;(&lt;span class=&quot;string&quot;&gt;&#39;somefile.txt&#39;&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&#39;rt&#39;&lt;/span&gt;, encoding=&lt;span class=&quot;string&quot;&gt;&#39;latin-1&#39;&lt;/span&gt;) &lt;span class=&quot;keyword&quot;&gt;as&lt;/span&gt; f:
    ...
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Python支持非常多的文本编码。几个常见的编码是ascii, latin-1, utf-8和utf-16。 在web应用程序中通常都使用的是UTF-8。 ascii对应从U+0000到U+007F范围内的7位字符。 latin-1是字节0-255到U+0000至U+00FF范围内Unicode字符的直接映射。 当读取一个未知编码的文本时使用latin-1编码永远不会产生解码错误。 使用latin-1编码读取一个文件的时候也许不能产生完全正确的文本解码数据， 但是它也能从中提取出足够多的有用数据。同时，如果你之后将数据回写回去，原先的数据还是会保留的。&lt;/p&gt;
&lt;h3 id=&quot;file&quot;&gt;file&lt;/h3&gt;&lt;pre&gt;&lt;code&gt;print &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;title&quot;&gt;file&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(&lt;span class=&quot;string&quot;&gt;&#39;/root/Desktop/test/chen.txt&#39;&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&#39;rt&#39;&lt;/span&gt;)&lt;/span&gt;&lt;/span&gt;.&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;title&quot;&gt;read&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;()&lt;/span&gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;h3 id=&quot;file与open_区别&quot;&gt;file与open 区别&lt;/h3&gt;&lt;p&gt;python3没有file了，基本这俩一样&lt;/p&gt;
&lt;h3 id=&quot;什么是IO？&quot;&gt;什么是IO？&lt;/h3&gt;&lt;p&gt;i就是input输入,O就是output输出,一起就是基本输入输出设备&lt;br&gt;I/O也就是输入输出地址。每个设备都会有一个专用的I/O地址，用来处理自己的输入输出信息。I/O地址绝对不能重复，如果两个设备的I/O地址有冲突，系统硬件就不能正常工作。以Windows XP操作系统为例，查看一个设备所占用的I/O地址的方法是：在系统桌面中选择“我的电脑”，单击鼠标右键，选择“属性”，在弹出的“系统属性”对话框中选择“硬件”，单击“设备管理器”按钮，弹出一个“设备管理器”窗口，在设备列表中双击要查看的I/O地址设备类型，然后双击具体的设备名称，在弹出对话框的“资源”选项卡中就可以看到该设备所占用的I/O地址了。在“资源设置”区域，可以看到显卡占用的I/O地址。 &lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;正常打开文件读取&quot;&gt;正常打开文件读取&lt;/h3&gt;&lt;p&gt;f = open(‘/root/Desktop/test/chen.txt’,’rt’)&lt;/p&gt;
&lt;p&gt;open()内建函数，第一个参数是文件绝对路径，第二个是对文件操作的权限&lt;/p&gt;
&lt;p&gt;r&lt;br&gt;以读方式打
    
    </summary>
    
      <category term="python" scheme="http://python-ning.github.io/categories/python/"/>
    
    
      <category term="python" scheme="http://python-ning.github.io/tags/python/"/>
    
  </entry>
  
  <entry>
    <title>python图片小爬虫</title>
    <link href="http://python-ning.github.io/2016/02/01/python_scrapy_img/"/>
    <id>http://python-ning.github.io/2016/02/01/python_scrapy_img/</id>
    <published>2016-02-01T08:00:00.000Z</published>
    <updated>2016-02-01T20:07:28.000Z</updated>
    
    <content type="html">&lt;p&gt;&lt;img src=&quot;http://7xojjc.com1.z0.glb.clouddn.com/89403-106.jpg&quot; class=&quot;img-shadow&quot; style=&quot;display: block;margin: auto&quot;&gt;&lt;/p&gt;
&lt;p&gt;最近没活了，简单复习下爬虫，就去爬了下煎蛋网的妹子图和糗事百科的图片，&lt;br&gt;python做爬虫和模拟登陆来说最适合不过了，除了各种强大的库，也只需很少的代码量就能完成功能。&lt;/p&gt;
&lt;h3 id=&quot;我理解的python爬虫&quot;&gt;我理解的python爬虫&lt;/h3&gt;&lt;p&gt;我理解的python爬虫，利用urllib2(自带库) 、httplib(httplib是一个相对底层的http请求模块，urlib就是基于httplib封装的)、requests(我个人喜欢用这个)等库去发送http请求，然后将请求到的html页面，或者ajax返回的xml、json或者js等进行解析，用pyquery(我个人喜欢用这个)、BeautifulSoup(from bs4 import BeautifulSoup一般这么引用)、lxml(解析xml)、xpath(没怎么用过)、HTMLParser(from html.parser import HTMLParser一般这么引用)等&lt;/p&gt;
&lt;h3 id=&quot;http协议&quot;&gt;http协议&lt;/h3&gt;&lt;p&gt;你一定要对http协议有了解，在此基础上对网页进行解析，其实说白了就是拿一些网页信息进行解析&lt;/p&gt;
&lt;h3 id=&quot;模拟登陆&quot;&gt;模拟登陆&lt;/h3&gt;&lt;p&gt;在抓取网页的基础上，我们要做一个模拟人去做用户登录，然后去拿我的订单号啊等等的就是模拟登陆，基本是加入post中的data信息去做登陆。&lt;/p&gt;
&lt;h3 id=&quot;robots协议&quot;&gt;robots协议&lt;/h3&gt;&lt;p&gt;Robots协议（也称为爬虫协议、机器人协议等）的全称是“网络爬虫排除标准”（Robots Exclusion Protocol），网站通过Robots协议告诉搜索引擎哪些页面可以抓取，哪些页面不能抓取。&lt;br&gt;        &lt;a href=&quot;https://www.baidu.com/robots.txt&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;https://www.baidu.com/robots.txt&lt;/a&gt;&lt;br&gt;我在任何web官网的url后边+/robots.txt就可看到每个官网允许或者不允许爬的内容,也没啥用，让你不爬你就不爬啊。&lt;/p&gt;
&lt;h3 id=&quot;煎蛋网妹子图爬虫实例：&quot;&gt;煎蛋网妹子图爬虫实例：&lt;/h3&gt;&lt;pre&gt;&lt;code&gt;import requests
from pyquery import PyQuery as pq
import &lt;span class=&quot;keyword&quot;&gt;time&lt;/span&gt;

&lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt; page in range(&lt;span class=&quot;number&quot;&gt;1720&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;1501&lt;/span&gt;, -&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;):
    url = &lt;span class=&quot;string&quot;&gt;&quot;http://jandan.net/ooxx/page-&lt;span class=&quot;variable&quot;&gt;%s&lt;/span&gt;#comments&quot;&lt;/span&gt; % page
    headers = {
        &lt;span class=&quot;string&quot;&gt;&#39;Accept&#39;&lt;/span&gt;: &lt;span class=&quot;string&quot;&gt;&#39;text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,*/*;q=0.8&#39;&lt;/span&gt;,
        &lt;span class=&quot;string&quot;&gt;&#39;Accept-Encoding&#39;&lt;/span&gt;: &lt;span class=&quot;string&quot;&gt;&#39;gzip, deflate, sdch&#39;&lt;/span&gt;,
        &lt;span class=&quot;string&quot;&gt;&#39;Accept-Language&#39;&lt;/span&gt;: &lt;span class=&quot;string&quot;&gt;&#39;zh-CN,zh;q=0.8&#39;&lt;/span&gt;,
        &lt;span class=&quot;string&quot;&gt;&#39;Host&#39;&lt;/span&gt;: &lt;span class=&quot;string&quot;&gt;&#39;jandan.net&#39;&lt;/span&gt;,
        &lt;span class=&quot;string&quot;&gt;&#39;User-Agent&#39;&lt;/span&gt;: &lt;span class=&quot;string&quot;&gt;&#39;Mozilla/5.0 (Windows NT 10.0; WOW64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/47.0.2526.80 Safari/537.36&#39;&lt;/span&gt;
        &lt;span class=&quot;comment&quot;&gt;# &#39;User-Agent&#39;: &#39;Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.36 (KHTML, like Gecko) Ubuntu Chromium/47.0.2526.73 Chrome/47.0.2526.73 Safari/537.36&#39;&lt;/span&gt;
        &lt;span class=&quot;comment&quot;&gt;# &#39;User-Agent&#39;: &#39;Mozilla/5.0 (Windows NT 10.0; WOW64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/47.0.2526.106 Safari/537.36&#39;&lt;/span&gt;
        &lt;span class=&quot;comment&quot;&gt;# &#39;User-Agent&#39;: &#39;Mozilla/5.0 (Macintosh; Intel Mac OS X 10_11_2) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/47.0.2526.106 Safari/537.36&#39;&lt;/span&gt;
    }
    &lt;span class=&quot;keyword&quot;&gt;time&lt;/span&gt;.&lt;span class=&quot;keyword&quot;&gt;sleep&lt;/span&gt;(&lt;span class=&quot;number&quot;&gt;2&lt;/span&gt;)
    response = requests.session().get(url, headers=headers, timeout=&lt;span class=&quot;number&quot;&gt;50&lt;/span&gt;, verify=False)
    &lt;span class=&quot;keyword&quot;&gt;print&lt;/span&gt; response

    b = p&lt;span class=&quot;string&quot;&gt;q(response.content)&lt;/span&gt;
    path = b(&lt;span class=&quot;string&quot;&gt;&#39;div[class=&quot;text&quot;] p&#39;&lt;/span&gt;)
    img = path(&lt;span class=&quot;string&quot;&gt;&#39;img&#39;&lt;/span&gt;)
    &lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt; i in img:
        &lt;span class=&quot;keyword&quot;&gt;time&lt;/span&gt;.&lt;span class=&quot;keyword&quot;&gt;sleep&lt;/span&gt;(&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;)
        img_url = i.&lt;span class=&quot;keyword&quot;&gt;values&lt;/span&gt;()[&lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;].decode(&lt;span class=&quot;string&quot;&gt;&#39;utf-8&#39;&lt;/span&gt;)
        filename = img_url.&lt;span class=&quot;keyword&quot;&gt;split&lt;/span&gt;(&lt;span class=&quot;string&quot;&gt;&#39;/&#39;&lt;/span&gt;)[-&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;]
        &lt;span class=&quot;keyword&quot;&gt;print&lt;/span&gt; img_url, &lt;span class=&quot;string&quot;&gt;&#39;-&#39;&lt;/span&gt; * &lt;span class=&quot;number&quot;&gt;30&lt;/span&gt;, filename
        r = requests.get(img_url, stream=True).content
        file(&lt;span class=&quot;string&quot;&gt;&#39;/root/Desktop/testpachong/MM/page%s_img%s&#39;&lt;/span&gt; %
             (page, filename), &lt;span class=&quot;string&quot;&gt;&#39;a&#39;&lt;/span&gt;).&lt;span class=&quot;keyword&quot;&gt;write&lt;/span&gt;(r)
        &lt;span class=&quot;keyword&quot;&gt;print&lt;/span&gt; page
&lt;span class=&quot;keyword&quot;&gt;print&lt;/span&gt; &lt;span class=&quot;string&quot;&gt;&#39;done&#39;&lt;/span&gt;
&lt;span class=&quot;comment&quot;&gt;# JanDanWangMeiZiTu&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;h3 id=&quot;糗事百科图片实例：&quot;&gt;糗事百科图片实例：&lt;/h3&gt;&lt;pre&gt;&lt;code&gt;&lt;span class=&quot;comment&quot;&gt;# coding:utf-8&lt;/span&gt;
import re
import urllib
import urllib2

&lt;span class=&quot;operator&quot;&gt;a&lt;/span&gt; = &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;
&lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt; page &lt;span class=&quot;operator&quot;&gt;in&lt;/span&gt; xrange(&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;36&lt;/span&gt;):
    &lt;span class=&quot;operator&quot;&gt;a&lt;/span&gt; += &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;
    url = &lt;span class=&quot;string&quot;&gt;&#39;http://www.qiushibaike.com/imgrank/page/%s&#39;&lt;/span&gt; % page

    headers = {
        &lt;span class=&quot;string&quot;&gt;&#39;User-Agent&#39;&lt;/span&gt;: &lt;span class=&quot;string&quot;&gt;&#39;Mozilla/5.0 (Windows NT 6.1; WOW64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/43.0.2357.124 Safari/537.36&#39;&lt;/span&gt;
    }
    request = urllib2.Request(url, headers=headers)
    response = urllib2.urlopen(request)
    html = response.&lt;span class=&quot;built_in&quot;&gt;read&lt;/span&gt;().decode(&lt;span class=&quot;string&quot;&gt;&#39;utf-8&#39;&lt;/span&gt;)
    imglist = re.findall(&lt;span class=&quot;string&quot;&gt;&#39;img src=&quot;(.*?)\.jpg&quot;&#39;&lt;/span&gt;, html)
    i = &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;
    &lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt; img &lt;span class=&quot;operator&quot;&gt;in&lt;/span&gt; imglist:
        i += &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;
        imgfile = urllib.urlopen(img + &lt;span class=&quot;string&quot;&gt;&#39;.jpg&#39;&lt;/span&gt;)
        &lt;span class=&quot;built_in&quot;&gt;file&lt;/span&gt;(&lt;span class=&quot;string&quot;&gt;&#39;/root/Desktop/testpachong/QiuShiBaiKe/page%s_img%s.jpg&#39;&lt;/span&gt; % (page, i), &lt;span class=&quot;string&quot;&gt;&#39;wb&#39;&lt;/span&gt;).&lt;span class=&quot;built_in&quot;&gt;write&lt;/span&gt;(imgfile.&lt;span class=&quot;built_in&quot;&gt;read&lt;/span&gt;())
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;python爬虫还有个scrapy框架：听说比较强悍，回头瞅瞅&lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;http://7xojjc.com1.z0.glb.clouddn.com/89403-106.jpg&quot; class=&quot;img-shadow&quot; style=&quot;display: block;margin: auto&quot;&gt;&lt;/p&gt;
&lt;p&gt;最近没活了，简单复习下
    
    </summary>
    
      <category term="python" scheme="http://python-ning.github.io/categories/python/"/>
    
    
      <category term="爬虫" scheme="http://python-ning.github.io/tags/%E7%88%AC%E8%99%AB/"/>
    
  </entry>
  
</feed>
